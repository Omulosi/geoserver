2021-03-09 18:25:20,683 INFO [org.geoserver] - GeoServer configuration lock is enabled
2021-03-09 18:25:20,783 INFO [org.geoserver] - Loading catalog...
2021-03-09 18:25:20,906 INFO [org.geoserver] - Loaded style 'point'
2021-03-09 18:25:20,907 INFO [org.geoserver] - Loaded style 'population'
2021-03-09 18:25:20,908 INFO [org.geoserver] - Loaded style 'tiger_roads'
2021-03-09 18:25:20,909 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2021-03-09 18:25:20,910 INFO [org.geoserver] - Loaded style 'cite_lakes'
2021-03-09 18:25:20,911 INFO [org.geoserver] - Loaded style 'restricted'
2021-03-09 18:25:20,912 INFO [org.geoserver] - Loaded style 'grass'
2021-03-09 18:25:20,913 INFO [org.geoserver] - Loaded style 'simple_streams'
2021-03-09 18:25:20,914 INFO [org.geoserver] - Loaded style 'simple_roads'
2021-03-09 18:25:20,916 INFO [org.geoserver] - Loaded style 'polygon'
2021-03-09 18:25:20,917 INFO [org.geoserver] - Loaded style 'dem'
2021-03-09 18:25:20,919 INFO [org.geoserver] - Loaded style 'raster'
2021-03-09 18:25:20,922 INFO [org.geoserver] - Loaded style 'generic'
2021-03-09 18:25:20,923 INFO [org.geoserver] - Loaded style 'line'
2021-03-09 18:25:20,924 INFO [org.geoserver] - Loaded style 'capitals'
2021-03-09 18:25:20,927 INFO [org.geoserver] - Loaded style 'rain'
2021-03-09 18:25:20,928 INFO [org.geoserver] - Loaded style 'poi'
2021-03-09 18:25:20,929 INFO [org.geoserver] - Loaded style 'pophatch'
2021-03-09 18:25:20,931 INFO [org.geoserver] - Loaded style 'green'
2021-03-09 18:25:20,932 INFO [org.geoserver] - Loaded style 'giant_polygon'
2021-03-09 18:25:20,933 INFO [org.geoserver] - Loaded style 'burg'
2021-03-09 18:25:20,935 INFO [org.geoserver] - Loaded default workspace cite
2021-03-09 18:25:20,959 INFO [org.geoserver] - Loaded workspace 'tiger'
2021-03-09 18:25:20,966 INFO [org.geoserver] - Loaded workspace 'sf'
2021-03-09 18:25:20,968 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2021-03-09 18:25:20,971 INFO [org.geoserver] - Loaded workspace 'sde'
2021-03-09 18:25:20,973 INFO [org.geoserver] - Loaded workspace 'nurc'
2021-03-09 18:25:20,975 INFO [org.geoserver] - Loaded workspace 'topp'
2021-03-09 18:25:20,978 INFO [org.geoserver] - Loaded workspace 'cite'
2021-03-09 18:25:21,802 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2021-03-09 18:25:23,584 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2021-03-09 18:25:23,611 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2021-03-09 18:25:23,617 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2021-03-09 18:25:23,619 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2021-03-09 18:25:23,624 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2021-03-09 18:25:23,627 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2021-03-09 18:25:23,633 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2021-03-09 18:25:23,638 INFO [org.geoserver] - Loaded layer 'poi'
2021-03-09 18:25:23,653 INFO [org.geoserver] - Loaded data store 'sf', enabled
2021-03-09 18:25:24,119 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2021-03-09 18:25:24,122 INFO [org.geoserver] - Loaded layer 'bugsites'
2021-03-09 18:25:24,131 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2021-03-09 18:25:24,135 INFO [org.geoserver] - Loaded layer 'archsites'
2021-03-09 18:25:24,144 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2021-03-09 18:25:24,147 INFO [org.geoserver] - Loaded layer 'roads'
2021-03-09 18:25:24,158 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2021-03-09 18:25:24,161 INFO [org.geoserver] - Loaded layer 'streams'
2021-03-09 18:25:24,170 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2021-03-09 18:25:24,172 INFO [org.geoserver] - Loaded layer 'restricted'
2021-03-09 18:25:24,187 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2021-03-09 18:25:24,225 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2021-03-09 18:25:24,227 INFO [org.geoserver] - Loaded layer 'sfdem'
2021-03-09 18:25:24,233 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2021-03-09 18:25:24,247 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2021-03-09 18:25:24,248 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2021-03-09 18:25:24,252 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2021-03-09 18:25:24,260 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2021-03-09 18:25:24,262 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2021-03-09 18:25:24,265 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2021-03-09 18:25:24,285 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2021-03-09 18:25:24,287 INFO [org.geoserver] - Loaded layer 'Pk50095'
2021-03-09 18:25:24,289 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2021-03-09 18:25:24,299 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2021-03-09 18:25:24,301 INFO [org.geoserver] - Loaded layer 'mosaic'
2021-03-09 18:25:24,311 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2021-03-09 18:25:24,317 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2021-03-09 18:25:24,318 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2021-03-09 18:25:24,330 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2021-03-09 18:25:24,334 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2021-03-09 18:25:24,340 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2021-03-09 18:25:24,342 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2021-03-09 18:25:24,347 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2021-03-09 18:25:24,349 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2021-03-09 18:25:24,356 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2021-03-09 18:25:24,363 INFO [org.geoserver] - Loaded feature type 'states', enabled
2021-03-09 18:25:24,365 INFO [org.geoserver] - Loaded layer 'states'
2021-03-09 18:25:24,389 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2021-03-09 18:25:24,393 INFO [org.geoserver] - Loaded layer group 'tasmania'
2021-03-09 18:25:24,397 INFO [org.geoserver] - Loaded layer group 'spearfish'
2021-03-09 18:25:24,401 INFO [org.geoserver] - Read catalog in 3.616 s
2021-03-09 18:25:24,588 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl-af8ad73:1781797c0eb:-8000', enabled
2021-03-09 18:25:24,606 INFO [org.geoserver] - Loaded service 'wcs', enabled
2021-03-09 18:25:24,633 INFO [org.geoserver] - Loaded service 'wfs', enabled
2021-03-09 18:25:24,667 INFO [org.geoserver] - Loaded service 'wms', enabled
2021-03-09 18:25:24,724 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory '/home/jp/Desktop/geoserver/bin/../data_dir/gwc'.
2021-03-09 18:25:24,858 WARN [config.GeoserverXMLResourceProvider] - Found no configuration file in config directory, will create one at 'gwc/geowebcache.xml' from template jar:file:/home/jp/Desktop/geoserver/webapps/geoserver/WEB-INF/lib/gwc-core-1.18.2.jar!/geowebcache_empty.xml
2021-03-09 18:25:24,862 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-03-09 18:25:24,863 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-03-09 18:25:24,944 WARN [config.XMLConfiguration] - ********************************************************************************
2021-03-09 18:25:24,945 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2021-03-09 18:25:24,945 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2021-03-09 18:25:24,945 WARN [config.XMLConfiguration] - ********************************************************************************
2021-03-09 18:25:25,034 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2021-03-09 18:25:25,036 INFO [config.XMLConfiguration] - Initializing layers from gwc
2021-03-09 18:25:25,087 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2021-03-09 18:25:25,087 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2021-03-09 18:25:25,087 INFO [gwc.layer] - Loading tile layers from gwc-layers
2021-03-09 18:25:25,092 INFO [gwc.layer] - Loaded 0 tile layers in 4.072 ms
2021-03-09 18:25:25,110 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2021-03-09 18:25:25,122 INFO [storage.DefaultStorageFinder] - *********************************************************************************************************************************************
2021-03-09 18:25:25,122 INFO [storage.DefaultStorageFinder] - *** Found Java environment variable GEOSERVER_DATA_DIR set to /home/jp/Desktop/geoserver/bin/../data_dir, using it as the default prefix. ***
2021-03-09 18:25:25,122 INFO [storage.DefaultStorageFinder] - *********************************************************************************************************************************************
2021-03-09 18:25:25,204 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2021-03-09 18:25:26,718 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory '/home/jp/Desktop/geoserver/bin/../data_dir/gwc'.
2021-03-09 18:25:26,734 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory '/home/jp/Desktop/geoserver/bin/../data_dir/gwc'.
2021-03-09 18:25:26,740 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-03-09 18:25:26,756 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-03-09 18:25:26,759 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2021-03-09 18:25:26,759 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2021-03-09 18:25:26,761 INFO [diskquota.DiskQuotaMonitor] - 22 layers attached to global quota 500.0 MB
2021-03-09 18:25:26,802 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2021-03-09 18:25:27,085 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2021-03-09 18:25:27,110 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2021-03-09 18:25:27,119 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2021-03-09 18:25:27,292 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2021-03-09 18:25:27,292 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2021-03-09 18:25:29,536 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2021-03-09 18:25:30,058 INFO [platform.resource] - Notifying ENTRY_CREATE change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 22, removed: 0, modified: 0
2021-03-09 18:25:30,247 WARN [gce.imagemosaic] - Unable to set ordering between tiff readers spi
2021-03-09 18:25:33,579 INFO [geoserver.security] - AuthenticationCache Initialized with 1000 Max Entries, 300 seconds idle time, 600 seconds time to live and 3 concurrency level
2021-03-09 18:25:33,580 INFO [geoserver.security] - AuthenticationCache Eviction Task created to run every 600 seconds
2021-03-09 18:25:34,558 INFO [geoserver.security] - Start reloading user/groups for service named default
2021-03-09 18:25:34,586 INFO [geoserver.security] - Reloading user/groups successful for service named default
2021-03-09 18:26:48,811 INFO [geoserver.security] - Strong cryptography is available
2021-03-09 18:27:48,153 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-09 18:27:48,760 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        typeName[0] = {http://www.census.gov}giant_polygon
    maxFeatures = 50
    outputFormat = application/json
    resultType = results
2021-03-09 18:27:48,807 INFO [wfs.json] - about to encode JSON
2021-03-10 05:54:42,963 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 05:54:43,725 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[-124.73142200000001 : -66.969849, 24.955967 : 49.371735]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = application/openlayers
	FormatOptions = {}
	Get = true
	Height = 330
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@e1aa9f40]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, SRS=EPSG:4326, FORMAT=application/openlayers, BBOX=-124.73142200000001,24.955967,-66.969849,49.371735, VERSION=1.1.0, STYLES=, SERVICE=WMS, WIDTH=768, HEIGHT=330, LAYERS=topp:states}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=population]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = false
	ValidateSchema = false
	Version = 1.1.0
	ViewParams = null
	Width = 768
2021-03-10 05:54:44,289 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 05:54:45,193 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[-129.638671875 : -62.138671875, 22.67578125 : 51.6796875]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 330
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@e1aa9f40]
	MaxFeatures = null
	Palette = null
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_inimage, FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:4326, BBOX=-129.638671875,22.67578125,-62.138671875,51.6796875, VERSION=1.1.1, STYLES=, WIDTH=768, SERVICE=WMS, HEIGHT=330, TRANSPARENT=true, LAYERS=topp:states}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=population]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 768
2021-03-10 05:54:58,226 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 05:54:58,343 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_inimage
	ExcludeNodataResults = false
	FeatureCount = 50
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.1.1
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[-121.7724609375 : -112.8955078125, 35.1123046875 : 43.9892578125]
 layers: topp:states
 styles: population
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@e1aa9f40]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, STYLES=, WIDTH=101, HEIGHT=101, LAYERS=topp:states, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetFeatureInfo, SRS=EPSG:4326, BBOX=-121.7724609375,35.1123046875,-112.8955078125,43.9892578125, VERSION=1.1.1, X=50, Y=50, SERVICE=WMS, QUERY_LAYERS=topp:states, TRANSPARENT=true, FEATURE_COUNT=50}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.1.1
	XPixel = 50
	YPixel = 50
2021-03-10 05:54:58,861 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 05:54:58,898 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_inimage
	ExcludeNodataResults = false
	FeatureCount = 50
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.1.1
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[-119.7509765625 : -110.8740234375, 35.2001953125 : 44.0771484375]
 layers: topp:states
 styles: population
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@e1aa9f40]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, STYLES=, WIDTH=101, HEIGHT=101, LAYERS=topp:states, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetFeatureInfo, SRS=EPSG:4326, BBOX=-119.7509765625,35.2001953125,-110.8740234375,44.0771484375, VERSION=1.1.1, X=50, Y=50, SERVICE=WMS, QUERY_LAYERS=topp:states, TRANSPARENT=true, FEATURE_COUNT=50}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.1.1
	XPixel = 50
	YPixel = 50
2021-03-10 05:58:44,390 WARN [geoserver.security] - Failed login, user  from 0:0:0:0:0:0:0:1
2021-03-10 05:58:44,392 INFO [geoserver.security] - Brute force attack prevention, delaying login for 2395ms
2021-03-10 06:16:32,799 WARN [wicket.Localizer] - Tried to retrieve a localized string for a component that has not yet been added to the page. This can sometimes lead to an invalid or no localized resource returned. Make sure you are not calling Component#getString() inside your Component's constructor. Offending component: [ShapefileDirectoryEditPanel [Component id = parametersPanel]]
2021-03-10 06:16:32,806 WARN [wicket.Localizer] - Tried to retrieve a localized string for a component that has not yet been added to the page. This can sometimes lead to an invalid or no localized resource returned. Make sure you are not calling Component#getString() inside your Component's constructor. Offending component: [ShapefileDirectoryEditPanel [Component id = parametersPanel]]
2021-03-10 06:19:02,752 WARN [wicket.Localizer] - Tried to retrieve a localized string for a component that has not yet been added to the page. This can sometimes lead to an invalid or no localized resource returned. Make sure you are not calling Component#getString() inside your Component's constructor. Offending component: [ShapefileDirectoryEditPanel [Component id = parametersPanel]]
2021-03-10 06:19:02,753 WARN [wicket.Localizer] - Tried to retrieve a localized string for a component that has not yet been added to the page. This can sometimes lead to an invalid or no localized resource returned. Make sure you are not calling Component#getString() inside your Component's constructor. Offending component: [ShapefileDirectoryEditPanel [Component id = parametersPanel]]
2021-03-10 06:19:46,306 WARN [wicket.Localizer] - Tried to retrieve a localized string for a component that has not yet been added to the page. This can sometimes lead to an invalid or no localized resource returned. Make sure you are not calling Component#getString() inside your Component's constructor. Offending component: [ShapefileDirectoryEditPanel [Component id = parametersPanel]]
2021-03-10 06:19:46,307 WARN [wicket.Localizer] - Tried to retrieve a localized string for a component that has not yet been added to the page. This can sometimes lead to an invalid or no localized resource returned. Make sure you are not calling Component#getString() inside your Component's constructor. Offending component: [ShapefileDirectoryEditPanel [Component id = parametersPanel]]
2021-03-10 06:22:11,479 WARN [data.workspace] - Failed to save workspace
java.lang.IllegalArgumentException: Settings already exist for workspace 'ngeo'
	at org.geoserver.config.impl.GeoServerImpl.add(GeoServerImpl.java:119)
	at org.geoserver.web.data.workspace.WorkspaceEditPage.saveWorkspace(WorkspaceEditPage.java:252)
	at org.geoserver.web.data.workspace.WorkspaceEditPage.access$000(WorkspaceEditPage.java:80)
	at org.geoserver.web.data.workspace.WorkspaceEditPage$4.onSubmit(WorkspaceEditPage.java:207)
	at org.apache.wicket.markup.html.form.Form.delegateSubmit(Form.java:1309)
	at org.apache.wicket.markup.html.form.Form.process(Form.java:976)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:797)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:708)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.wicket.RequestListenerInterface.internalInvoke(RequestListenerInterface.java:258)
	at org.apache.wicket.RequestListenerInterface.invoke(RequestListenerInterface.java:216)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.invokeListener(ListenerInterfaceRequestHandler.java:241)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.respond(ListenerInterfaceRequestHandler.java:234)
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895)
	at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
	at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
	at org.apache.wicket.protocol.http.WicketServlet.doPost(WicketServlet.java:159)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:166)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:873)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1623)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerUserNamePasswordAuthenticationFilter.doFilter(GeoServerUserNamePasswordAuthenticationFilter.java:122)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1602)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:540)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1700)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1345)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:480)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1667)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1247)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:220)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:152)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.Server.handle(Server.java:505)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:370)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:267)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)
	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:698)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:804)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-03-10 06:24:59,651 WARN [wicket.Localizer] - Tried to retrieve a localized string for a component that has not yet been added to the page. This can sometimes lead to an invalid or no localized resource returned. Make sure you are not calling Component#getString() inside your Component's constructor. Offending component: [ShapefileDirectoryEditPanel [Component id = parametersPanel]]
2021-03-10 06:24:59,651 WARN [wicket.Localizer] - Tried to retrieve a localized string for a component that has not yet been added to the page. This can sometimes lead to an invalid or no localized resource returned. Make sure you are not calling Component#getString() inside your Component's constructor. Offending component: [ShapefileDirectoryEditPanel [Component id = parametersPanel]]
2021-03-10 06:31:12,866 INFO [geoserver.gwc] - Saving GeoSeverTileLayer ngeo:kenya%20constituencies
2021-03-10 06:31:15,356 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 1, removed: 0, modified: 0
2021-03-10 06:31:16,826 WARN [catalog.impl] - Catalog listener threw exception handling event.
java.lang.IllegalArgumentException: A GeoServerTileLayer named 'ngeo:kenya%20constituencies' already exists
	at com.google.common.base.Preconditions.checkArgument(Preconditions.java:142)
	at org.geoserver.gwc.layer.CatalogConfiguration.addLayer(CatalogConfiguration.java:451)
	at org.geowebcache.layer.TileLayerDispatcher.addLayer(TileLayerDispatcher.java:194)
	at org.geoserver.gwc.GWC.add(GWC.java:1427)
	at org.geoserver.gwc.layer.CatalogLayerEventListener.createTileLayer(CatalogLayerEventListener.java:169)
	at org.geoserver.gwc.layer.CatalogLayerEventListener.handleAddEvent(CatalogLayerEventListener.java:150)
	at org.geoserver.catalog.impl.CatalogImpl.event(CatalogImpl.java:1729)
	at org.geoserver.catalog.impl.CatalogImpl.fireAdded(CatalogImpl.java:1689)
	at org.geoserver.catalog.impl.CatalogImpl.added(CatalogImpl.java:1668)
	at org.geoserver.catalog.impl.CatalogImpl.add(CatalogImpl.java:674)
	at org.geoserver.security.SecureCatalogImpl.add(SecureCatalogImpl.java:1170)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.add(AbstractFilteredCatalog.java:486)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.add(AbstractCatalogDecorator.java:340)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.add(LocalWorkspaceCatalog.java:304)
	at org.geoserver.web.data.resource.ResourceConfigurationPage.doSaveInternal(ResourceConfigurationPage.java:231)
	at org.geoserver.web.publish.PublishedConfigurationPage.doSave(PublishedConfigurationPage.java:326)
	at org.geoserver.web.publish.PublishedConfigurationPage$6.onSubmit(PublishedConfigurationPage.java:289)
	at org.apache.wicket.markup.html.form.Form.delegateSubmit(Form.java:1309)
	at org.apache.wicket.markup.html.form.Form.process(Form.java:976)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:797)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:708)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.wicket.RequestListenerInterface.internalInvoke(RequestListenerInterface.java:258)
	at org.apache.wicket.RequestListenerInterface.invoke(RequestListenerInterface.java:216)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.invokeListener(ListenerInterfaceRequestHandler.java:241)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.respond(ListenerInterfaceRequestHandler.java:234)
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895)
	at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
	at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
	at org.apache.wicket.protocol.http.WicketServlet.doPost(WicketServlet.java:159)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:166)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:873)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1623)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerUserNamePasswordAuthenticationFilter.doFilter(GeoServerUserNamePasswordAuthenticationFilter.java:122)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1602)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:540)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1700)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1345)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:480)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1667)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1247)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:220)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:152)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.Server.handle(Server.java:505)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:370)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:267)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)
	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:698)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:804)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-03-10 06:31:16,833 INFO [geoserver.gwc] - Saving GeoSeverTileLayer ngeo:kenya%20constituencies
2021-03-10 06:31:20,359 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 0, removed: 0, modified: 1
2021-03-10 06:31:33,789 WARN [wicket.Localizer] - Tried to retrieve a localized string for a component that has not yet been added to the page. This can sometimes lead to an invalid or no localized resource returned. Make sure you are not calling Component#getString() inside your Component's constructor. Offending component: [ShapefileDirectoryEditPanel [Component id = parametersPanel]]
2021-03-10 06:31:33,791 WARN [wicket.Localizer] - Tried to retrieve a localized string for a component that has not yet been added to the page. This can sometimes lead to an invalid or no localized resource returned. Make sure you are not calling Component#getString() inside your Component's constructor. Offending component: [ShapefileDirectoryEditPanel [Component id = parametersPanel]]
2021-03-10 06:32:01,694 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 06:32:01,750 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[33.910255574000075 : 41.90551001300008, -4.776350021362305 : 5.414106846000038]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = application/openlayers
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@9e5342df]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, SRS=EPSG:4326, FORMAT=application/openlayers, BBOX=33.910255574000075,-4.776350021362305,41.90551001300008,5.414106846000038, VERSION=1.1.0, STYLES=, SERVICE=WMS, WIDTH=602, HEIGHT=768, LAYERS=ngeo:kenya%20constituencies}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = false
	ValidateSchema = false
	Version = 1.1.0
	ViewParams = null
	Width = 602
2021-03-10 06:32:02,197 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 06:32:02,729 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[31.2890625 : 44.5166015625, -8.10791015625 : 8.76708984375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@9e5342df]
	MaxFeatures = null
	Palette = null
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_inimage, FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:4326, BBOX=31.2890625,-8.10791015625,44.5166015625,8.76708984375, VERSION=1.1.1, STYLES=, WIDTH=602, SERVICE=WMS, HEIGHT=768, TRANSPARENT=true, LAYERS=ngeo:kenya%20constituencies}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 602
2021-03-10 06:32:09,770 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 06:32:09,795 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_inimage
	ExcludeNodataResults = false
	FeatureCount = 50
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.1.1
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[37.628173828125 : 39.847412109375, 0.274658203125 : 2.493896484375]
 layers: ngeo:kenya%20constituencies
 styles: polygon
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@9e5342df]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, STYLES=, WIDTH=101, HEIGHT=101, LAYERS=ngeo:kenya%20constituencies, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetFeatureInfo, SRS=EPSG:4326, BBOX=37.628173828125,0.274658203125,39.847412109375,2.493896484375, VERSION=1.1.1, X=50, Y=50, SERVICE=WMS, QUERY_LAYERS=ngeo:kenya%20constituencies, TRANSPARENT=true, FEATURE_COUNT=50}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.1.1
	XPixel = 50
	YPixel = 50
2021-03-10 06:32:22,881 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 06:32:23,073 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[37.94677734375 : 41.253662109375, -4.3341064453125 : -0.1153564453125]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@9e5342df]
	MaxFeatures = null
	Palette = null
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_inimage, FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:4326, BBOX=37.94677734375,-4.3341064453125,41.253662109375,-0.1153564453125, VERSION=1.1.1, STYLES=, WIDTH=602, SERVICE=WMS, HEIGHT=768, TRANSPARENT=true, LAYERS=ngeo:kenya%20constituencies}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 602
2021-03-10 06:32:23,546 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 06:32:23,760 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[35.96923828125 : 42.5830078125, -5.888671875 : 2.548828125]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@9e5342df]
	MaxFeatures = null
	Palette = null
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_inimage, FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:4326, BBOX=35.96923828125,-5.888671875,42.5830078125,2.548828125, VERSION=1.1.1, STYLES=, WIDTH=602, SERVICE=WMS, HEIGHT=768, TRANSPARENT=true, LAYERS=ngeo:kenya%20constituencies}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 602
2021-03-10 06:33:32,019 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:kenya%20constituencies to ngeo:kenya_constituencies
2021-03-10 06:33:32,024 INFO [geoserver.gwc] - Renaming GWC TileLayer 'ngeo:kenya%20constituencies' as 'ngeo:kenya_constituencies'
2021-03-10 06:33:32,039 INFO [geoserver.gwc] - Saving GeoSeverTileLayer ngeo:kenya_constituencies
2021-03-10 06:33:34,269 INFO [geoserver.gwc] - Saving GeoSeverTileLayer ngeo:kenya_constituencies
2021-03-10 06:33:35,379 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 0, removed: 0, modified: 1
2021-03-10 06:41:28,412 WARN [wicket.Localizer] - Tried to retrieve a localized string for a component that has not yet been added to the page. This can sometimes lead to an invalid or no localized resource returned. Make sure you are not calling Component#getString() inside your Component's constructor. Offending component: [ShapefileDirectoryEditPanel [Component id = parametersPanel]]
2021-03-10 06:41:28,415 WARN [wicket.Localizer] - Tried to retrieve a localized string for a component that has not yet been added to the page. This can sometimes lead to an invalid or no localized resource returned. Make sure you are not calling Component#getString() inside your Component's constructor. Offending component: [ShapefileDirectoryEditPanel [Component id = parametersPanel]]
2021-03-10 06:43:57,353 INFO [geoserver.gwc] - Saving GeoSeverTileLayer ngeo:shapefiles_countygazetted
2021-03-10 06:43:59,320 WARN [catalog.impl] - Catalog listener threw exception handling event.
java.lang.IllegalArgumentException: A GeoServerTileLayer named 'ngeo:shapefiles_countygazetted' already exists
	at com.google.common.base.Preconditions.checkArgument(Preconditions.java:142)
	at org.geoserver.gwc.layer.CatalogConfiguration.addLayer(CatalogConfiguration.java:451)
	at org.geowebcache.layer.TileLayerDispatcher.addLayer(TileLayerDispatcher.java:194)
	at org.geoserver.gwc.GWC.add(GWC.java:1427)
	at org.geoserver.gwc.layer.CatalogLayerEventListener.createTileLayer(CatalogLayerEventListener.java:169)
	at org.geoserver.gwc.layer.CatalogLayerEventListener.handleAddEvent(CatalogLayerEventListener.java:150)
	at org.geoserver.catalog.impl.CatalogImpl.event(CatalogImpl.java:1729)
	at org.geoserver.catalog.impl.CatalogImpl.fireAdded(CatalogImpl.java:1689)
	at org.geoserver.catalog.impl.CatalogImpl.added(CatalogImpl.java:1668)
	at org.geoserver.catalog.impl.CatalogImpl.add(CatalogImpl.java:674)
	at org.geoserver.security.SecureCatalogImpl.add(SecureCatalogImpl.java:1170)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.add(AbstractFilteredCatalog.java:486)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.add(AbstractCatalogDecorator.java:340)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.add(LocalWorkspaceCatalog.java:304)
	at org.geoserver.web.data.resource.ResourceConfigurationPage.doSaveInternal(ResourceConfigurationPage.java:231)
	at org.geoserver.web.publish.PublishedConfigurationPage.doSave(PublishedConfigurationPage.java:326)
	at org.geoserver.web.publish.PublishedConfigurationPage$6.onSubmit(PublishedConfigurationPage.java:289)
	at org.apache.wicket.markup.html.form.Form.delegateSubmit(Form.java:1309)
	at org.apache.wicket.markup.html.form.Form.process(Form.java:976)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:797)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:708)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.wicket.RequestListenerInterface.internalInvoke(RequestListenerInterface.java:258)
	at org.apache.wicket.RequestListenerInterface.invoke(RequestListenerInterface.java:216)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.invokeListener(ListenerInterfaceRequestHandler.java:241)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.respond(ListenerInterfaceRequestHandler.java:234)
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895)
	at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
	at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
	at org.apache.wicket.protocol.http.WicketServlet.doPost(WicketServlet.java:159)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:166)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:873)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1623)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerUserNamePasswordAuthenticationFilter.doFilter(GeoServerUserNamePasswordAuthenticationFilter.java:122)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1602)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:540)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1700)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1345)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:480)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1667)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1247)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:220)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:152)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.Server.handle(Server.java:505)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:370)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:267)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)
	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:698)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:804)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-03-10 06:43:59,326 INFO [geoserver.gwc] - Saving GeoSeverTileLayer ngeo:shapefiles_countygazetted
2021-03-10 06:44:00,485 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 1, removed: 0, modified: 0
2021-03-10 06:45:27,254 INFO [geoserver.gwc] - Saving GeoSeverTileLayer ngeo:shapefiles_kenyahealth
2021-03-10 06:45:30,499 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 1, removed: 0, modified: 0
2021-03-10 06:45:57,558 INFO [geoserver.gwc] - Saving GeoSeverTileLayer ngeo:shapefiles_kenyasubcounty
2021-03-10 06:46:00,506 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 1, removed: 0, modified: 0
2021-03-10 06:46:09,572 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 06:46:09,593 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[33.909706115722656 : 41.90605926513672, -4.70527172088623 : 5.414107322692871]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = application/openlayers
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@a59b3b01]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, SRS=EPSG:4326, FORMAT=application/openlayers, BBOX=33.909706115722656,-4.70527172088623,41.90605926513672,5.414107322692871, VERSION=1.1.0, STYLES=, SERVICE=WMS, WIDTH=606, HEIGHT=768, LAYERS=ngeo:shapefiles_countygazetted}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = false
	ValidateSchema = false
	Version = 1.1.0
	ViewParams = null
	Width = 606
2021-03-10 06:46:09,953 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 06:46:10,282 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[31.2451171875 : 44.560546875, -8.0859375 : 8.7890625]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@a59b3b01]
	MaxFeatures = null
	Palette = null
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_inimage, FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:4326, BBOX=31.2451171875,-8.0859375,44.560546875,8.7890625, VERSION=1.1.1, STYLES=, WIDTH=606, SERVICE=WMS, HEIGHT=768, TRANSPARENT=true, LAYERS=ngeo:shapefiles_countygazetted}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 606
2021-03-10 06:46:20,485 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 06:46:20,528 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[-3.402823466385289E38 : 41.86274719238281, -3.402823466385289E38 : 5.383852481842041]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = application/openlayers
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@74562cdb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, SRS=EPSG:4326, FORMAT=application/openlayers, BBOX=-3.402823466385289E38,-3.402823466385289E38,41.86274719238281,5.383852481842041, VERSION=1.1.0, STYLES=, SERVICE=WMS, WIDTH=768, HEIGHT=768, LAYERS=ngeo:shapefiles_kenyahealth}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = false
	ValidateSchema = false
	Version = 1.1.0
	ViewParams = null
	Width = 768
2021-03-10 06:46:20,887 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 06:46:20,894 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Missing or invalid requested map size. Parameters WIDTH and HEIGHT shall be present and be integers > 0. Got WIDTH=0, HEIGHT=0
	at org.geoserver.wms.GetMap.assertMandatory(GetMap.java:875)
	at org.geoserver.wms.GetMap.run(GetMap.java:182)
	at org.geoserver.wms.GetMap.run(GetMap.java:123)
	at org.geoserver.wms.DefaultWebMapService.getMap(DefaultWebMapService.java:246)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.kml.WebMapServiceKmlInterceptor.invoke(WebMapServiceKmlInterceptor.java:38)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.gwc.wms.CacheSeedingWebMapService.invoke(CacheSeedingWebMapService.java:55)
	at org.geoserver.gwc.wms.CacheSeedingWebMapService.invoke(CacheSeedingWebMapService.java:31)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.gwc.wms.CachingWebMapService.invoke(CachingWebMapService.java:61)
	at org.geoserver.gwc.wms.CachingWebMapService.invoke(CachingWebMapService.java:41)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy109.getMap(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:877)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:873)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1623)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1602)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:540)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1700)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1345)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:480)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1667)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1247)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:220)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:152)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.Server.handle(Server.java:505)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:370)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:267)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)
	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:698)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:804)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-03-10 06:46:27,545 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 06:46:27,552 WARN [renderer.lite] - Determinant is 0
java.awt.geom.NoninvertibleTransformException: Determinant is 0
	at java.desktop/java.awt.geom.AffineTransform.createInverse(AffineTransform.java:2722)
	at org.geotools.renderer.lite.RendererUtilities.worldToScreenTransform(RendererUtilities.java:141)
	at org.geoserver.wms.WMSMapContent.getRenderingTransform(WMSMapContent.java:237)
	at org.geoserver.wms.WMSMapContent.getScaleDenominator(WMSMapContent.java:371)
	at org.geoserver.wms.FeatureInfoRequestParameters.getScaleDenominator(FeatureInfoRequestParameters.java:121)
	at org.geoserver.wms.FeatureInfoRequestParameters.<init>(FeatureInfoRequestParameters.java:98)
	at org.geoserver.wms.GetFeatureInfo.execute(GetFeatureInfo.java:62)
	at org.geoserver.wms.GetFeatureInfo.run(GetFeatureInfo.java:38)
	at org.geoserver.wms.DefaultWebMapService.getFeatureInfo(DefaultWebMapService.java:260)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.kml.WebMapServiceKmlInterceptor.invoke(WebMapServiceKmlInterceptor.java:38)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy109.getFeatureInfo(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:877)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:873)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1623)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1602)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:540)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1700)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1345)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:480)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1667)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1247)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:220)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:152)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.Server.handle(Server.java:505)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:370)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:267)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)
	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:698)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:804)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-03-10 06:46:27,560 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Internal error occurred
	at org.geoserver.wms.GetFeatureInfo.run(GetFeatureInfo.java:44)
	at org.geoserver.wms.DefaultWebMapService.getFeatureInfo(DefaultWebMapService.java:260)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.kml.WebMapServiceKmlInterceptor.invoke(WebMapServiceKmlInterceptor.java:38)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy109.getFeatureInfo(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:877)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:873)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1623)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1602)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:540)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1700)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1345)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:480)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1667)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1247)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:220)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:152)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.Server.handle(Server.java:505)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:370)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:267)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)
	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:698)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:804)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.NullPointerException
	at org.geotools.referencing.operation.matrix.XAffineTransform.getFlip(XAffineTransform.java:523)
	at org.geotools.referencing.operation.matrix.XAffineTransform.getRotation(XAffineTransform.java:475)
	at org.geoserver.wms.WMSMapContent.getScaleDenominator(WMSMapContent.java:372)
	at org.geoserver.wms.FeatureInfoRequestParameters.getScaleDenominator(FeatureInfoRequestParameters.java:121)
	at org.geoserver.wms.FeatureInfoRequestParameters.<init>(FeatureInfoRequestParameters.java:98)
	at org.geoserver.wms.GetFeatureInfo.execute(GetFeatureInfo.java:62)
	at org.geoserver.wms.GetFeatureInfo.run(GetFeatureInfo.java:38)
	... 117 more
2021-03-10 06:46:27,809 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 06:46:27,814 WARN [renderer.lite] - Determinant is 0
java.awt.geom.NoninvertibleTransformException: Determinant is 0
	at java.desktop/java.awt.geom.AffineTransform.createInverse(AffineTransform.java:2722)
	at org.geotools.renderer.lite.RendererUtilities.worldToScreenTransform(RendererUtilities.java:141)
	at org.geoserver.wms.WMSMapContent.getRenderingTransform(WMSMapContent.java:237)
	at org.geoserver.wms.WMSMapContent.getScaleDenominator(WMSMapContent.java:371)
	at org.geoserver.wms.FeatureInfoRequestParameters.getScaleDenominator(FeatureInfoRequestParameters.java:121)
	at org.geoserver.wms.FeatureInfoRequestParameters.<init>(FeatureInfoRequestParameters.java:98)
	at org.geoserver.wms.GetFeatureInfo.execute(GetFeatureInfo.java:62)
	at org.geoserver.wms.GetFeatureInfo.run(GetFeatureInfo.java:38)
	at org.geoserver.wms.DefaultWebMapService.getFeatureInfo(DefaultWebMapService.java:260)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.kml.WebMapServiceKmlInterceptor.invoke(WebMapServiceKmlInterceptor.java:38)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy109.getFeatureInfo(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:877)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:873)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1623)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1602)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:540)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1700)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1345)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:480)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1667)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1247)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:220)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:152)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.Server.handle(Server.java:505)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:370)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:267)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)
	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:698)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:804)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-03-10 06:46:27,832 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Internal error occurred
	at org.geoserver.wms.GetFeatureInfo.run(GetFeatureInfo.java:44)
	at org.geoserver.wms.DefaultWebMapService.getFeatureInfo(DefaultWebMapService.java:260)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.kml.WebMapServiceKmlInterceptor.invoke(WebMapServiceKmlInterceptor.java:38)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy109.getFeatureInfo(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:877)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:873)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1623)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1602)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:540)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1700)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1345)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:480)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1667)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1247)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:220)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:152)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.Server.handle(Server.java:505)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:370)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:267)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)
	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:698)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:804)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.NullPointerException
	at org.geotools.referencing.operation.matrix.XAffineTransform.getFlip(XAffineTransform.java:523)
	at org.geotools.referencing.operation.matrix.XAffineTransform.getRotation(XAffineTransform.java:475)
	at org.geoserver.wms.WMSMapContent.getScaleDenominator(WMSMapContent.java:372)
	at org.geoserver.wms.FeatureInfoRequestParameters.getScaleDenominator(FeatureInfoRequestParameters.java:121)
	at org.geoserver.wms.FeatureInfoRequestParameters.<init>(FeatureInfoRequestParameters.java:98)
	at org.geoserver.wms.GetFeatureInfo.execute(GetFeatureInfo.java:62)
	at org.geoserver.wms.GetFeatureInfo.run(GetFeatureInfo.java:38)
	... 117 more
2021-03-10 06:46:29,886 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 06:46:29,892 WARN [renderer.lite] - Determinant is 0
java.awt.geom.NoninvertibleTransformException: Determinant is 0
	at java.desktop/java.awt.geom.AffineTransform.createInverse(AffineTransform.java:2722)
	at org.geotools.renderer.lite.RendererUtilities.worldToScreenTransform(RendererUtilities.java:141)
	at org.geoserver.wms.WMSMapContent.getRenderingTransform(WMSMapContent.java:237)
	at org.geoserver.wms.WMSMapContent.getScaleDenominator(WMSMapContent.java:371)
	at org.geoserver.wms.FeatureInfoRequestParameters.getScaleDenominator(FeatureInfoRequestParameters.java:121)
	at org.geoserver.wms.FeatureInfoRequestParameters.<init>(FeatureInfoRequestParameters.java:98)
	at org.geoserver.wms.GetFeatureInfo.execute(GetFeatureInfo.java:62)
	at org.geoserver.wms.GetFeatureInfo.run(GetFeatureInfo.java:38)
	at org.geoserver.wms.DefaultWebMapService.getFeatureInfo(DefaultWebMapService.java:260)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.kml.WebMapServiceKmlInterceptor.invoke(WebMapServiceKmlInterceptor.java:38)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy109.getFeatureInfo(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:877)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:873)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1623)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1602)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:540)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1700)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1345)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:480)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1667)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1247)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:220)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:152)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.Server.handle(Server.java:505)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:370)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:267)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)
	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:698)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:804)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-03-10 06:46:29,898 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Internal error occurred
	at org.geoserver.wms.GetFeatureInfo.run(GetFeatureInfo.java:44)
	at org.geoserver.wms.DefaultWebMapService.getFeatureInfo(DefaultWebMapService.java:260)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.kml.WebMapServiceKmlInterceptor.invoke(WebMapServiceKmlInterceptor.java:38)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy109.getFeatureInfo(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:877)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:873)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1623)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1602)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:540)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1700)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1345)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:480)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1667)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1247)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:220)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:152)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.Server.handle(Server.java:505)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:370)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:267)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)
	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:698)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:804)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.NullPointerException
	at org.geotools.referencing.operation.matrix.XAffineTransform.getFlip(XAffineTransform.java:523)
	at org.geotools.referencing.operation.matrix.XAffineTransform.getRotation(XAffineTransform.java:475)
	at org.geoserver.wms.WMSMapContent.getScaleDenominator(WMSMapContent.java:372)
	at org.geoserver.wms.FeatureInfoRequestParameters.getScaleDenominator(FeatureInfoRequestParameters.java:121)
	at org.geoserver.wms.FeatureInfoRequestParameters.<init>(FeatureInfoRequestParameters.java:98)
	at org.geoserver.wms.GetFeatureInfo.execute(GetFeatureInfo.java:62)
	at org.geoserver.wms.GetFeatureInfo.run(GetFeatureInfo.java:38)
	... 117 more
2021-03-10 06:46:30,688 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 06:46:30,698 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[-3.402823466385289E38 : 41.86274719238281, -3.402823466385289E38 : 5.383852481842041]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = application/openlayers
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@74562cdb]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, SRS=EPSG:4326, FORMAT=application/openlayers, BBOX=-3.402823466385289E38,-3.402823466385289E38,41.86274719238281,5.383852481842041, VERSION=1.1.0, STYLES=, SERVICE=WMS, WIDTH=768, HEIGHT=768, LAYERS=ngeo:shapefiles_kenyahealth}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = false
	ValidateSchema = false
	Version = 1.1.0
	ViewParams = null
	Width = 768
2021-03-10 06:46:30,949 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 06:46:30,953 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Missing or invalid requested map size. Parameters WIDTH and HEIGHT shall be present and be integers > 0. Got WIDTH=0, HEIGHT=0
	at org.geoserver.wms.GetMap.assertMandatory(GetMap.java:875)
	at org.geoserver.wms.GetMap.run(GetMap.java:182)
	at org.geoserver.wms.GetMap.run(GetMap.java:123)
	at org.geoserver.wms.DefaultWebMapService.getMap(DefaultWebMapService.java:246)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.kml.WebMapServiceKmlInterceptor.invoke(WebMapServiceKmlInterceptor.java:38)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.gwc.wms.CacheSeedingWebMapService.invoke(CacheSeedingWebMapService.java:55)
	at org.geoserver.gwc.wms.CacheSeedingWebMapService.invoke(CacheSeedingWebMapService.java:31)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.gwc.wms.CachingWebMapService.invoke(CachingWebMapService.java:61)
	at org.geoserver.gwc.wms.CachingWebMapService.invoke(CachingWebMapService.java:41)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy109.getMap(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:877)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:873)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1623)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1602)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:540)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1700)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1345)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:480)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1667)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1247)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:220)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:152)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.Server.handle(Server.java:505)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:370)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:267)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)
	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:698)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:804)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-03-10 06:46:33,622 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 06:46:33,626 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Missing or invalid requested map size. Parameters WIDTH and HEIGHT shall be present and be integers > 0. Got WIDTH=0, HEIGHT=0
	at org.geoserver.wms.GetMap.assertMandatory(GetMap.java:875)
	at org.geoserver.wms.GetMap.run(GetMap.java:182)
	at org.geoserver.wms.GetMap.run(GetMap.java:123)
	at org.geoserver.wms.DefaultWebMapService.getMap(DefaultWebMapService.java:246)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.kml.WebMapServiceKmlInterceptor.invoke(WebMapServiceKmlInterceptor.java:38)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.gwc.wms.CacheSeedingWebMapService.invoke(CacheSeedingWebMapService.java:55)
	at org.geoserver.gwc.wms.CacheSeedingWebMapService.invoke(CacheSeedingWebMapService.java:31)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.gwc.wms.CachingWebMapService.invoke(CachingWebMapService.java:61)
	at org.geoserver.gwc.wms.CachingWebMapService.invoke(CachingWebMapService.java:41)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy109.getMap(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:877)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:873)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1623)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1602)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:540)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1700)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1345)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:480)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1667)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1247)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:220)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:152)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.Server.handle(Server.java:505)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:370)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:267)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)
	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:698)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:804)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-03-10 06:46:34,690 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 06:46:34,695 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Missing or invalid requested map size. Parameters WIDTH and HEIGHT shall be present and be integers > 0. Got WIDTH=0, HEIGHT=0
	at org.geoserver.wms.GetMap.assertMandatory(GetMap.java:875)
	at org.geoserver.wms.GetMap.run(GetMap.java:182)
	at org.geoserver.wms.GetMap.run(GetMap.java:123)
	at org.geoserver.wms.DefaultWebMapService.getMap(DefaultWebMapService.java:246)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.kml.WebMapServiceKmlInterceptor.invoke(WebMapServiceKmlInterceptor.java:38)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.gwc.wms.CacheSeedingWebMapService.invoke(CacheSeedingWebMapService.java:55)
	at org.geoserver.gwc.wms.CacheSeedingWebMapService.invoke(CacheSeedingWebMapService.java:31)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.gwc.wms.CachingWebMapService.invoke(CachingWebMapService.java:61)
	at org.geoserver.gwc.wms.CachingWebMapService.invoke(CachingWebMapService.java:41)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy109.getMap(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:877)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:873)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1623)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1602)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:540)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1700)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1345)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:480)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1667)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1247)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:220)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:152)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.Server.handle(Server.java:505)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:370)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:267)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)
	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:698)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:804)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-03-10 06:46:41,883 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 06:46:41,895 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[33.91049575805664 : 41.91056442260742, -4.67972993850708 : 5.466979026794434]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = application/openlayers
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7e33a9c1]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, SRS=EPSG:4326, FORMAT=application/openlayers, BBOX=33.91049575805664,-4.67972993850708,41.91056442260742,5.466979026794434, VERSION=1.1.0, STYLES=, SERVICE=WMS, WIDTH=605, HEIGHT=768, LAYERS=ngeo:shapefiles_kenyasubcounty}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = false
	ValidateSchema = false
	Version = 1.1.0
	ViewParams = null
	Width = 605
2021-03-10 06:46:42,254 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 06:46:42,826 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[31.256103515625 : 44.549560546875, -8.0419921875 : 8.8330078125]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7e33a9c1]
	MaxFeatures = null
	Palette = null
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_inimage, FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:4326, BBOX=31.256103515625,-8.0419921875,44.549560546875,8.8330078125, VERSION=1.1.1, STYLES=, WIDTH=605, SERVICE=WMS, HEIGHT=768, TRANSPARENT=true, LAYERS=ngeo:shapefiles_kenyasubcounty}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 605
2021-03-10 06:47:11,019 WARN [wicket.Localizer] - Tried to retrieve a localized string for a component that has not yet been added to the page. This can sometimes lead to an invalid or no localized resource returned. Make sure you are not calling Component#getString() inside your Component's constructor. Offending component: [ShapefileDirectoryEditPanel [Component id = parametersPanel]]
2021-03-10 06:47:11,020 WARN [wicket.Localizer] - Tried to retrieve a localized string for a component that has not yet been added to the page. This can sometimes lead to an invalid or no localized resource returned. Make sure you are not calling Component#getString() inside your Component's constructor. Offending component: [ShapefileDirectoryEditPanel [Component id = parametersPanel]]
2021-03-10 06:48:13,814 INFO [geoserver.gwc] - Saving GeoSeverTileLayer ngeo:ke_major-towns
2021-03-10 06:48:15,528 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 1, removed: 0, modified: 0
2021-03-10 06:48:41,184 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 06:48:41,195 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[34.07014846801758 : 41.84012222290039, -4.168556722328701 : 4.265939235687256]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = application/openlayers
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@93932fc2]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, SRS=EPSG:4326, FORMAT=application/openlayers, BBOX=34.07014846801758,-4.168556722328701,41.84012222290039,4.265939235687256, VERSION=1.1.0, STYLES=, SERVICE=WMS, WIDTH=707, HEIGHT=768, LAYERS=ngeo:ke_major-towns}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = false
	ValidateSchema = false
	Version = 1.1.0
	ViewParams = null
	Width = 707
2021-03-10 06:48:41,575 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 06:48:41,667 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[30.179443359375 : 45.714111328125, -8.3935546875 : 8.4814453125]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@93932fc2]
	MaxFeatures = null
	Palette = null
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_inimage, FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:4326, BBOX=30.179443359375,-8.3935546875,45.714111328125,8.4814453125, VERSION=1.1.1, STYLES=, WIDTH=707, SERVICE=WMS, HEIGHT=768, TRANSPARENT=true, LAYERS=ngeo:ke_major-towns}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 707
2021-03-10 06:48:48,482 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 06:48:48,499 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_inimage
	ExcludeNodataResults = false
	FeatureCount = 50
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.1.1
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[36.97998046875 : 39.19921875, -2.010498046875 : 0.208740234375]
 layers: ngeo:ke_major-towns
 styles: point
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@93932fc2]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, STYLES=, WIDTH=101, HEIGHT=101, LAYERS=ngeo:ke_major-towns, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetFeatureInfo, SRS=EPSG:4326, BBOX=36.97998046875,-2.010498046875,39.19921875,0.208740234375, VERSION=1.1.1, X=50, Y=50, SERVICE=WMS, QUERY_LAYERS=ngeo:ke_major-towns, TRANSPARENT=true, FEATURE_COUNT=50}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.1.1
	XPixel = 50
	YPixel = 50
2021-03-10 06:48:53,662 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 06:48:53,675 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_inimage
	ExcludeNodataResults = false
	FeatureCount = 50
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.1.1
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[38.408203125 : 40.62744140625, -5.218505859375 : -2.999267578125]
 layers: ngeo:ke_major-towns
 styles: point
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@93932fc2]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, STYLES=, WIDTH=101, HEIGHT=101, LAYERS=ngeo:ke_major-towns, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetFeatureInfo, SRS=EPSG:4326, BBOX=38.408203125,-5.218505859375,40.62744140625,-2.999267578125, VERSION=1.1.1, X=50, Y=50, SERVICE=WMS, QUERY_LAYERS=ngeo:ke_major-towns, TRANSPARENT=true, FEATURE_COUNT=50}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.1.1
	XPixel = 50
	YPixel = 50
2021-03-10 06:48:55,739 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 06:48:55,752 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_inimage
	ExcludeNodataResults = false
	FeatureCount = 50
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.1.1
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[39.814453125 : 42.03369140625, -3.350830078125 : -1.131591796875]
 layers: ngeo:ke_major-towns
 styles: point
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@93932fc2]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, STYLES=, WIDTH=101, HEIGHT=101, LAYERS=ngeo:ke_major-towns, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetFeatureInfo, SRS=EPSG:4326, BBOX=39.814453125,-3.350830078125,42.03369140625,-1.131591796875, VERSION=1.1.1, X=50, Y=50, SERVICE=WMS, QUERY_LAYERS=ngeo:ke_major-towns, TRANSPARENT=true, FEATURE_COUNT=50}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.1.1
	XPixel = 50
	YPixel = 50
2021-03-10 06:48:57,610 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 06:48:57,624 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_inimage
	ExcludeNodataResults = false
	FeatureCount = 50
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.1.1
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[38.56201171875 : 40.78125, -1.527099609375 : 0.692138671875]
 layers: ngeo:ke_major-towns
 styles: point
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@93932fc2]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, STYLES=, WIDTH=101, HEIGHT=101, LAYERS=ngeo:ke_major-towns, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetFeatureInfo, SRS=EPSG:4326, BBOX=38.56201171875,-1.527099609375,40.78125,0.692138671875, VERSION=1.1.1, X=50, Y=50, SERVICE=WMS, QUERY_LAYERS=ngeo:ke_major-towns, TRANSPARENT=true, FEATURE_COUNT=50}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.1.1
	XPixel = 50
	YPixel = 50
2021-03-10 06:49:40,945 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 06:49:40,972 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[17.95166015625 : 49.02099609375, -18.7646484375 : 14.9853515625]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@93932fc2]
	MaxFeatures = null
	Palette = null
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_inimage, FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:4326, BBOX=17.95166015625,-18.7646484375,49.02099609375,14.9853515625, VERSION=1.1.1, STYLES=, WIDTH=707, SERVICE=WMS, HEIGHT=768, TRANSPARENT=true, LAYERS=ngeo:ke_major-towns}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 707
2021-03-10 06:49:42,534 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 06:49:42,574 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[-0.3955078125 : 61.7431640625, -43.41796875 : 24.08203125]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@93932fc2]
	MaxFeatures = null
	Palette = null
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_inimage, FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:4326, BBOX=-0.3955078125,-43.41796875,61.7431640625,24.08203125, VERSION=1.1.1, STYLES=, WIDTH=707, SERVICE=WMS, HEIGHT=768, TRANSPARENT=true, LAYERS=ngeo:ke_major-towns}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 707
2021-03-10 06:49:43,474 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 06:49:43,493 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[27.542724609375 : 43.077392578125, -12.32666015625 : 4.54833984375]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@93932fc2]
	MaxFeatures = null
	Palette = null
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_inimage, FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:4326, BBOX=27.542724609375,-12.32666015625,43.077392578125,4.54833984375, VERSION=1.1.1, STYLES=, WIDTH=707, SERVICE=WMS, HEIGHT=768, TRANSPARENT=true, LAYERS=ngeo:ke_major-towns}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 707
2021-03-10 06:49:44,476 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 06:49:44,492 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[34.53277587890625 : 38.41644287109375, -4.5318603515625 : -0.3131103515625]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@93932fc2]
	MaxFeatures = null
	Palette = null
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_inimage, FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:4326, BBOX=34.53277587890625,-4.5318603515625,38.41644287109375,-0.3131103515625, VERSION=1.1.1, STYLES=, WIDTH=707, SERVICE=WMS, HEIGHT=768, TRANSPARENT=true, LAYERS=ngeo:ke_major-towns}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 707
2021-03-10 06:49:45,182 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 06:49:45,202 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[34.73602294921875 : 38.61968994140625, -2.7960205078125 : 1.4227294921875]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@93932fc2]
	MaxFeatures = null
	Palette = null
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_inimage, FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:4326, BBOX=34.73602294921875,-2.7960205078125,38.61968994140625,1.4227294921875, VERSION=1.1.1, STYLES=, WIDTH=707, SERVICE=WMS, HEIGHT=768, TRANSPARENT=true, LAYERS=ngeo:ke_major-towns}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 707
2021-03-10 06:49:46,553 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 06:49:46,570 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[34.28558349609375 : 38.16925048828125, -2.384033203125 : 1.834716796875]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@93932fc2]
	MaxFeatures = null
	Palette = null
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_inimage, FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:4326, BBOX=34.28558349609375,-2.384033203125,38.16925048828125,1.834716796875, VERSION=1.1.1, STYLES=, WIDTH=707, SERVICE=WMS, HEIGHT=768, TRANSPARENT=true, LAYERS=ngeo:ke_major-towns}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 707
2021-03-10 09:25:18,245 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 09:25:18,300 INFO [geoserver.wfs] - 
Request: getCapabilities
    acceptVersions:
        version[0] = 1.1.0
    baseUrl = http://localhost:8080/geoserver/
    service = wfs
2021-03-10 12:33:54,966 WARN [wicket.Localizer] - Tried to retrieve a localized string for a component that has not yet been added to the page. This can sometimes lead to an invalid or no localized resource returned. Make sure you are not calling Component#getString() inside your Component's constructor. Offending component: [DimensionEditor [Component id = time]]
2021-03-10 12:33:54,995 WARN [wicket.Localizer] - Tried to retrieve a localized string for a component that has not yet been added to the page. This can sometimes lead to an invalid or no localized resource returned. Make sure you are not calling Component#getString() inside your Component's constructor. Offending component: [DimensionEditor [Component id = time]]
2021-03-10 12:33:57,146 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 12:33:57,517 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=population, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=population, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=population, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@522fe3a2
2021-03-10 12:41:08,115 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 12:41:08,222 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[-124.73142200000001 : -66.969849, 24.955967 : 49.371735]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = application/openlayers
	FormatOptions = {}
	Get = true
	Height = 330
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@e1aa9f40]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, SRS=EPSG:4326, FORMAT=application/openlayers, BBOX=-124.73142200000001,24.955967,-66.969849,49.371735, VERSION=1.1.0, STYLES=, SERVICE=WMS, WIDTH=780, HEIGHT=330, LAYERS=topp:states}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=population]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = false
	ValidateSchema = false
	Version = 1.1.0
	ViewParams = null
	Width = 780
2021-03-10 12:42:05,659 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 12:42:05,675 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[-124.73142200000001 : -66.969849, 24.955967 : 49.371735]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = application/openlayers
	FormatOptions = {}
	Get = true
	Height = 330
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@e1aa9f40]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, SRS=EPSG:4326, FORMAT=application/openlayers, BBOX=-124.73142200000001,24.955967,-66.969849,49.371735, VERSION=1.1.0, STYLES=, SERVICE=WMS, WIDTH=780, HEIGHT=330, LAYERS=topp:states}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=population]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = false
	ValidateSchema = false
	Version = 1.1.0
	ViewParams = null
	Width = 780
2021-03-10 12:42:06,407 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 12:42:06,612 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[-130.166015625 : -61.611328125, 22.67578125 : 51.6796875]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 330
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@e1aa9f40]
	MaxFeatures = null
	Palette = null
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_inimage, FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:4326, BBOX=-130.166015625,22.67578125,-61.611328125,51.6796875, VERSION=1.1.1, STYLES=, WIDTH=780, SERVICE=WMS, HEIGHT=330, TRANSPARENT=true, LAYERS=topp:states}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=population]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 780
2021-03-10 12:42:21,812 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 12:42:21,918 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[-137.63671875 : -54.140625, 22.67578125 : 51.6796875]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 330
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@e1aa9f40]
	MaxFeatures = null
	Palette = null
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_inimage, FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:4326, BBOX=-137.63671875,22.67578125,-54.140625,51.6796875, VERSION=1.1.1, STYLES=, WIDTH=950, SERVICE=WMS, HEIGHT=330, TRANSPARENT=true, LAYERS=topp:states}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=population]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 950
2021-03-10 12:49:17,014 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 12:49:17,019 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: There is no support for creating maps in application/json format
	at org.geoserver.wms.GetMap.getDelegate(GetMap.java:980)
	at org.geoserver.wms.GetMap.run(GetMap.java:186)
	at org.geoserver.wms.GetMap.run(GetMap.java:123)
	at org.geoserver.wms.DefaultWebMapService.getMap(DefaultWebMapService.java:246)
	at jdk.internal.reflect.GeneratedMethodAccessor456.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.kml.WebMapServiceKmlInterceptor.invoke(WebMapServiceKmlInterceptor.java:38)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.gwc.wms.CacheSeedingWebMapService.invoke(CacheSeedingWebMapService.java:55)
	at org.geoserver.gwc.wms.CacheSeedingWebMapService.invoke(CacheSeedingWebMapService.java:31)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.gwc.wms.CachingWebMapService.invoke(CachingWebMapService.java:61)
	at org.geoserver.gwc.wms.CachingWebMapService.invoke(CachingWebMapService.java:41)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy109.getMap(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor417.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:877)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:873)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1623)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1602)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:540)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1700)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1345)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:480)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1667)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1247)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:220)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:152)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.Server.handle(Server.java:505)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:370)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:267)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)
	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:698)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:804)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-03-10 12:49:28,225 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 12:49:28,230 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: There is no support for creating maps in json format
	at org.geoserver.wms.GetMap.getDelegate(GetMap.java:980)
	at org.geoserver.wms.GetMap.run(GetMap.java:186)
	at org.geoserver.wms.GetMap.run(GetMap.java:123)
	at org.geoserver.wms.DefaultWebMapService.getMap(DefaultWebMapService.java:246)
	at jdk.internal.reflect.GeneratedMethodAccessor456.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.kml.WebMapServiceKmlInterceptor.invoke(WebMapServiceKmlInterceptor.java:38)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.gwc.wms.CacheSeedingWebMapService.invoke(CacheSeedingWebMapService.java:55)
	at org.geoserver.gwc.wms.CacheSeedingWebMapService.invoke(CacheSeedingWebMapService.java:31)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.gwc.wms.CachingWebMapService.invoke(CachingWebMapService.java:61)
	at org.geoserver.gwc.wms.CachingWebMapService.invoke(CachingWebMapService.java:41)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy109.getMap(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor417.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:877)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:873)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1623)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1602)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:540)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1700)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1345)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:480)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1667)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1247)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:220)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:152)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.Server.handle(Server.java:505)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:370)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:267)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)
	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:698)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:804)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-03-10 12:49:48,004 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 12:49:48,007 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: No output map format requested
	at org.geoserver.wms.GetMap.assertMandatory(GetMap.java:888)
	at org.geoserver.wms.GetMap.run(GetMap.java:182)
	at org.geoserver.wms.GetMap.run(GetMap.java:123)
	at org.geoserver.wms.DefaultWebMapService.getMap(DefaultWebMapService.java:246)
	at jdk.internal.reflect.GeneratedMethodAccessor456.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.kml.WebMapServiceKmlInterceptor.invoke(WebMapServiceKmlInterceptor.java:38)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.gwc.wms.CacheSeedingWebMapService.invoke(CacheSeedingWebMapService.java:55)
	at org.geoserver.gwc.wms.CacheSeedingWebMapService.invoke(CacheSeedingWebMapService.java:31)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.gwc.wms.CachingWebMapService.invoke(CachingWebMapService.java:61)
	at org.geoserver.gwc.wms.CachingWebMapService.invoke(CachingWebMapService.java:41)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy109.getMap(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor417.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:877)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:873)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1623)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1602)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:540)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1700)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1345)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:480)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1667)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1247)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:220)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:152)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.Server.handle(Server.java:505)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:370)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:267)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)
	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:698)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:804)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-03-10 12:50:47,841 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 12:50:47,842 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: No such operation WMS 1.1.0 GetFeature
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:656)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:873)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1623)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1602)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:540)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1700)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1345)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:480)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1667)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1247)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:220)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:152)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.Server.handle(Server.java:505)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:370)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:267)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)
	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:698)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:804)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-03-10 12:53:26,211 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 12:53:26,235 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        typeName[0] = {http://www.openplans.org/topp}states
    maxFeatures = 50
    outputFormat = csv
    resultType = results
2021-03-10 12:53:49,186 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 12:53:49,190 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        typeName[0] = {http://www.openplans.org/topp}states
    maxFeatures = 50
    outputFormat = json
    resultType = results
2021-03-10 12:53:49,196 INFO [wfs.json] - about to encode JSON
2021-03-10 12:54:59,634 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:shapefiles_countygazetted to ngeo:counties
2021-03-10 12:54:59,648 INFO [geoserver.gwc] - Renaming GWC TileLayer 'ngeo:shapefiles_countygazetted' as 'ngeo:counties'
2021-03-10 12:54:59,790 INFO [geoserver.gwc] - Saving GeoSeverTileLayer ngeo:counties
2021-03-10 12:55:01,603 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 0, removed: 0, modified: 1
2021-03-10 12:55:21,532 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:counties to ngeo:ke_counties
2021-03-10 12:55:21,536 INFO [geoserver.gwc] - Renaming GWC TileLayer 'ngeo:counties' as 'ngeo:ke_counties'
2021-03-10 12:55:21,584 INFO [geoserver.gwc] - Saving GeoSeverTileLayer ngeo:ke_counties
2021-03-10 12:55:21,608 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 0, removed: 0, modified: 1
2021-03-10 12:55:40,861 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 12:55:40,864 ERROR [geoserver.ows] - 
org.geoserver.wfs.WFSException: Unknown namespace [ngeo]
	at org.geoserver.wfs.kvp.BaseFeatureKvpRequestReader.checkTypeName(BaseFeatureKvpRequestReader.java:336)
	at org.geoserver.wfs.kvp.BaseFeatureKvpRequestReader.read(BaseFeatureKvpRequestReader.java:121)
	at org.geoserver.wfs.kvp.GetFeatureKvpRequestReader.read(GetFeatureKvpRequestReader.java:61)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1544)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:690)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:873)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1623)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1602)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:540)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1700)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1345)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:480)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1667)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1247)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:220)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:152)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.Server.handle(Server.java:505)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:370)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:267)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)
	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:698)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:804)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-03-10 13:12:35,880 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:ke_counties to ngeo:ke_counties
2021-03-10 13:12:35,884 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:ke_major-towns to ngeo:ke_major-towns
2021-03-10 13:12:35,888 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:kenya_constituencies to ngeo:kenya_constituencies
2021-03-10 13:12:35,891 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:shapefiles_kenyahealth to ngeo:shapefiles_kenyahealth
2021-03-10 13:12:35,895 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:shapefiles_kenyasubcounty to ngeo:shapefiles_kenyasubcounty
2021-03-10 13:12:36,760 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 0, removed: 0, modified: 5
2021-03-10 13:12:37,907 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:ke_counties to ngeo:ke_counties
2021-03-10 13:12:37,916 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:ke_major-towns to ngeo:ke_major-towns
2021-03-10 13:12:37,924 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:kenya_constituencies to ngeo:kenya_constituencies
2021-03-10 13:12:37,929 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:shapefiles_kenyahealth to ngeo:shapefiles_kenyahealth
2021-03-10 13:12:37,932 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:shapefiles_kenyasubcounty to ngeo:shapefiles_kenyasubcounty
2021-03-10 13:12:41,761 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 0, removed: 0, modified: 5
2021-03-10 13:12:46,764 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 0, removed: 0, modified: 3
2021-03-10 13:12:51,194 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 13:12:51,199 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        typeName[0] = {http://www.openplans.org/topp}states
    maxFeatures = 50
    outputFormat = json
    resultType = results
2021-03-10 13:12:51,204 INFO [wfs.json] - about to encode JSON
2021-03-10 13:12:56,250 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 13:12:56,251 ERROR [geoserver.ows] - 
org.geoserver.wfs.WFSException: Unknown namespace [ngeo]
	at org.geoserver.wfs.kvp.BaseFeatureKvpRequestReader.checkTypeName(BaseFeatureKvpRequestReader.java:336)
	at org.geoserver.wfs.kvp.BaseFeatureKvpRequestReader.read(BaseFeatureKvpRequestReader.java:121)
	at org.geoserver.wfs.kvp.GetFeatureKvpRequestReader.read(GetFeatureKvpRequestReader.java:61)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1544)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:690)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:873)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1623)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1602)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:540)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1700)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1345)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:480)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1667)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1247)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:220)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:152)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.Server.handle(Server.java:505)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:370)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:267)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)
	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:698)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:804)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-03-10 13:13:36,753 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:ke_counties to ngeo:ke_counties
2021-03-10 13:13:36,757 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:ke_major-towns to ngeo:ke_major-towns
2021-03-10 13:13:36,761 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:kenya_constituencies to ngeo:kenya_constituencies
2021-03-10 13:13:36,768 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:shapefiles_kenyahealth to ngeo:shapefiles_kenyahealth
2021-03-10 13:13:36,771 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 1, removed: 0, modified: 3
2021-03-10 13:13:36,775 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:shapefiles_kenyasubcounty to ngeo:shapefiles_kenyasubcounty
2021-03-10 13:13:41,777 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 0, removed: 1, modified: 1
2021-03-10 13:13:43,079 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:ke_counties to ngeo:ke_counties
2021-03-10 13:13:43,082 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:ke_major-towns to ngeo:ke_major-towns
2021-03-10 13:13:43,085 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:kenya_constituencies to ngeo:kenya_constituencies
2021-03-10 13:13:43,089 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:shapefiles_kenyahealth to ngeo:shapefiles_kenyahealth
2021-03-10 13:13:43,092 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:shapefiles_kenyasubcounty to ngeo:shapefiles_kenyasubcounty
2021-03-10 13:13:43,108 ERROR [config.impl] - Error occurred processing a configuration change listener
java.lang.NullPointerException
	at org.geoserver.config.GeoServerDataDirectory.config(GeoServerDataDirectory.java:759)
	at org.geoserver.config.GeoServerConfigPersister.handleSettingsRemoved(GeoServerConfigPersister.java:280)
	at org.geoserver.config.impl.GeoServerImpl.fireSettingsRemoved(GeoServerImpl.java:193)
	at org.geoserver.config.impl.GeoServerImpl.remove(GeoServerImpl.java:136)
	at org.geoserver.web.data.workspace.WorkspaceEditPage.saveWorkspace(WorkspaceEditPage.java:259)
	at org.geoserver.web.data.workspace.WorkspaceEditPage.access$000(WorkspaceEditPage.java:80)
	at org.geoserver.web.data.workspace.WorkspaceEditPage$5.onSubmitInternal(WorkspaceEditPage.java:217)
	at org.geoserver.web.GeoserverAjaxSubmitLink.onSubmit(GeoserverAjaxSubmitLink.java:38)
	at org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink$1.onSubmit(AjaxSubmitLink.java:111)
	at org.apache.wicket.ajax.form.AjaxFormSubmitBehavior$AjaxFormSubmitter.onSubmit(AjaxFormSubmitBehavior.java:215)
	at org.apache.wicket.markup.html.form.Form.delegateSubmit(Form.java:1309)
	at org.apache.wicket.markup.html.form.Form.process(Form.java:976)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:797)
	at org.apache.wicket.ajax.form.AjaxFormSubmitBehavior.onEvent(AjaxFormSubmitBehavior.java:171)
	at org.apache.wicket.ajax.AjaxEventBehavior.respond(AjaxEventBehavior.java:155)
	at org.apache.wicket.ajax.AbstractDefaultAjaxBehavior.onRequest(AbstractDefaultAjaxBehavior.java:601)
	at jdk.internal.reflect.GeneratedMethodAccessor316.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.wicket.RequestListenerInterface.internalInvoke(RequestListenerInterface.java:258)
	at org.apache.wicket.RequestListenerInterface.invoke(RequestListenerInterface.java:241)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.invokeListener(ListenerInterfaceRequestHandler.java:248)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.respond(ListenerInterfaceRequestHandler.java:234)
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895)
	at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
	at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
	at org.apache.wicket.protocol.http.WicketServlet.doPost(WicketServlet.java:159)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:166)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:873)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1623)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerUserNamePasswordAuthenticationFilter.doFilter(GeoServerUserNamePasswordAuthenticationFilter.java:122)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1602)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:540)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1700)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1345)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:480)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1667)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1247)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:220)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:152)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.Server.handle(Server.java:505)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:370)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:267)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)
	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:698)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:804)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-03-10 13:13:46,778 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 0, removed: 0, modified: 5
2021-03-10 13:13:51,779 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 0, removed: 0, modified: 3
2021-03-10 13:13:55,080 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:ke_counties to ngeo:ke_counties
2021-03-10 13:13:55,082 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:ke_major-towns to ngeo:ke_major-towns
2021-03-10 13:13:55,085 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:kenya_constituencies to ngeo:kenya_constituencies
2021-03-10 13:13:55,088 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:shapefiles_kenyahealth to ngeo:shapefiles_kenyahealth
2021-03-10 13:13:55,091 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:shapefiles_kenyasubcounty to ngeo:shapefiles_kenyasubcounty
2021-03-10 13:13:56,782 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 0, removed: 0, modified: 5
2021-03-10 13:14:01,783 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 0, removed: 0, modified: 3
2021-03-10 13:14:21,689 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 13:14:21,690 ERROR [geoserver.ows] - 
org.geoserver.wfs.WFSException: Unknown namespace [ngeo]
	at org.geoserver.wfs.kvp.BaseFeatureKvpRequestReader.checkTypeName(BaseFeatureKvpRequestReader.java:336)
	at org.geoserver.wfs.kvp.BaseFeatureKvpRequestReader.read(BaseFeatureKvpRequestReader.java:121)
	at org.geoserver.wfs.kvp.GetFeatureKvpRequestReader.read(GetFeatureKvpRequestReader.java:61)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1544)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:690)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:873)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1623)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1602)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:540)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1700)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1345)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:480)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1667)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1247)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:220)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:152)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.Server.handle(Server.java:505)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:370)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:267)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)
	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:698)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:804)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-03-10 13:15:30,860 WARN [wicket.Localizer] - Tried to retrieve a localized string for a component that has not yet been added to the page. This can sometimes lead to an invalid or no localized resource returned. Make sure you are not calling Component#getString() inside your Component's constructor. Offending component: [ShapefileDirectoryEditPanel [Component id = parametersPanel]]
2021-03-10 13:15:30,860 WARN [wicket.Localizer] - Tried to retrieve a localized string for a component that has not yet been added to the page. This can sometimes lead to an invalid or no localized resource returned. Make sure you are not calling Component#getString() inside your Component's constructor. Offending component: [ShapefileDirectoryEditPanel [Component id = parametersPanel]]
2021-03-10 13:16:50,583 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:ke_counties to ngeo:ke_counties
2021-03-10 13:16:50,586 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:ke_major-towns to ngeo:ke_major-towns
2021-03-10 13:16:50,622 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:kenya_constituencies to ngeo:kenya_constituencies
2021-03-10 13:16:50,626 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:shapefiles_kenyahealth to ngeo:shapefiles_kenyahealth
2021-03-10 13:16:50,629 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:shapefiles_kenyasubcounty to ngeo:shapefiles_kenyasubcounty
2021-03-10 13:16:51,809 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 0, removed: 0, modified: 5
2021-03-10 13:16:53,651 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:ke_counties to ngeo:ke_counties
2021-03-10 13:16:53,654 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:ke_major-towns to ngeo:ke_major-towns
2021-03-10 13:16:53,658 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:kenya_constituencies to ngeo:kenya_constituencies
2021-03-10 13:16:53,661 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:shapefiles_kenyahealth to ngeo:shapefiles_kenyahealth
2021-03-10 13:16:53,664 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:shapefiles_kenyasubcounty to ngeo:shapefiles_kenyasubcounty
2021-03-10 13:16:56,810 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 0, removed: 0, modified: 5
2021-03-10 13:17:01,811 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 0, removed: 0, modified: 3
2021-03-10 13:18:31,546 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:ke_counties to ngeo:ke_counties
2021-03-10 13:18:31,550 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:ke_major-towns to ngeo:ke_major-towns
2021-03-10 13:18:31,553 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:kenya_constituencies to ngeo:kenya_constituencies
2021-03-10 13:18:31,609 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:shapefiles_kenyahealth to ngeo:shapefiles_kenyahealth
2021-03-10 13:18:31,674 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:shapefiles_kenyasubcounty to ngeo:shapefiles_kenyasubcounty
2021-03-10 13:18:31,843 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 0, removed: 0, modified: 5
2021-03-10 13:18:34,965 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:ke_counties to ngeo:ke_counties
2021-03-10 13:18:34,969 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:ke_major-towns to ngeo:ke_major-towns
2021-03-10 13:18:34,979 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:kenya_constituencies to ngeo:kenya_constituencies
2021-03-10 13:18:34,982 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:shapefiles_kenyahealth to ngeo:shapefiles_kenyahealth
2021-03-10 13:18:34,987 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:shapefiles_kenyasubcounty to ngeo:shapefiles_kenyasubcounty
2021-03-10 13:18:36,844 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 0, removed: 0, modified: 5
2021-03-10 13:18:41,397 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 13:18:41,398 ERROR [geoserver.ows] - 
org.geoserver.wfs.WFSException: Unknown namespace [ngeo]
	at org.geoserver.wfs.kvp.BaseFeatureKvpRequestReader.checkTypeName(BaseFeatureKvpRequestReader.java:336)
	at org.geoserver.wfs.kvp.BaseFeatureKvpRequestReader.read(BaseFeatureKvpRequestReader.java:121)
	at org.geoserver.wfs.kvp.GetFeatureKvpRequestReader.read(GetFeatureKvpRequestReader.java:61)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1544)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:690)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:255)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:873)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1623)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1602)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:540)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1700)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1345)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:480)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1667)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1247)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:220)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:152)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.Server.handle(Server.java:505)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:370)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:267)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)
	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:698)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:804)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-03-10 13:18:41,845 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 0, removed: 0, modified: 3
2021-03-10 13:21:36,083 WARN [servlet.PageNotFound] - No mapping for GET /geoserver/your_geoserver_workspacename/wfs
2021-03-10 13:22:11,152 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 13:22:11,752 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = application/gml+xml; version=3.2
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@2705c685 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 13:23:19,439 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 13:23:19,452 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@57d4fde2 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 13:23:19,455 INFO [wfs.json] - about to encode JSON
2021-03-10 15:22:16,751 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:22:16,845 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@58a836e2 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:22:16,876 INFO [wfs.json] - about to encode JSON
2021-03-10 15:22:17,354 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:22:18,308 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:22:18,316 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@5d328c3f (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:22:18,319 INFO [wfs.json] - about to encode JSON
2021-03-10 15:22:18,451 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:22:20,473 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:22:20,502 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@d2c954b (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:22:20,508 INFO [wfs.json] - about to encode JSON
2021-03-10 15:22:20,724 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:22:22,429 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:22:22,451 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@16d2d642 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:22:22,459 INFO [wfs.json] - about to encode JSON
2021-03-10 15:22:22,801 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:22:23,793 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:22:23,802 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@180995f2 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:22:23,805 INFO [wfs.json] - about to encode JSON
2021-03-10 15:22:23,958 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:22:24,721 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:22:24,730 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@5df05217 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:22:24,731 INFO [wfs.json] - about to encode JSON
2021-03-10 15:22:24,842 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:22:25,952 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:22:25,960 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@3e78f2c5 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:22:25,962 INFO [wfs.json] - about to encode JSON
2021-03-10 15:22:26,085 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:22:28,097 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:22:28,127 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@34f83d3d (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:22:28,130 INFO [wfs.json] - about to encode JSON
2021-03-10 15:22:28,357 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:22:29,436 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:22:29,447 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@78c4fc55 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:22:29,449 INFO [wfs.json] - about to encode JSON
2021-03-10 15:22:29,584 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:22:30,079 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:22:30,086 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@146f05f7 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:22:30,088 INFO [wfs.json] - about to encode JSON
2021-03-10 15:22:30,200 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:22:31,580 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:22:31,586 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@18ab7963 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:22:31,590 INFO [wfs.json] - about to encode JSON
2021-03-10 15:22:31,737 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:22:35,733 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:22:35,742 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@2b350947 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:22:35,743 INFO [wfs.json] - about to encode JSON
2021-03-10 15:22:35,850 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:23:44,991 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:23:45,015 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@24efe929 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:23:45,019 INFO [wfs.json] - about to encode JSON
2021-03-10 15:23:45,060 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:23:45,153 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@7a299829 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:23:45,154 INFO [wfs.json] - about to encode JSON
2021-03-10 15:23:45,429 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:23:45,436 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:23:46,431 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:23:46,443 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@1b5cedf4 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:23:46,445 INFO [wfs.json] - about to encode JSON
2021-03-10 15:23:46,602 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:23:48,599 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:23:48,646 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@3e7aeb8d (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:23:48,649 INFO [wfs.json] - about to encode JSON
2021-03-10 15:23:48,855 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:23:51,827 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:23:51,845 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@13d06c72 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:23:51,850 INFO [wfs.json] - about to encode JSON
2021-03-10 15:23:52,050 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:23:52,847 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:23:52,856 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@379e2f03 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:23:52,857 INFO [wfs.json] - about to encode JSON
2021-03-10 15:23:52,982 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:25:09,931 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:25:09,949 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@7e98f898 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:25:09,952 INFO [wfs.json] - about to encode JSON
2021-03-10 15:25:10,115 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:25:16,248 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:25:16,286 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@2976ee5c (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:25:16,301 INFO [wfs.json] - about to encode JSON
2021-03-10 15:25:16,478 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:25:20,482 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:25:20,490 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@790c8b65 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:25:20,491 INFO [wfs.json] - about to encode JSON
2021-03-10 15:25:20,607 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:32:51,479 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:32:51,515 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@58325a0b (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:32:51,518 INFO [wfs.json] - about to encode JSON
2021-03-10 15:32:51,775 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:32:52,762 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:32:52,770 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@3cda6638 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:32:52,772 INFO [wfs.json] - about to encode JSON
2021-03-10 15:32:52,883 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:32:54,885 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:32:54,893 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@4e793a0e (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:32:54,899 INFO [wfs.json] - about to encode JSON
2021-03-10 15:32:55,030 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:32:59,016 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:32:59,024 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@6841177f (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:32:59,026 INFO [wfs.json] - about to encode JSON
2021-03-10 15:32:59,139 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:33:10,621 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:33:10,630 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@1c32867d (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:33:10,642 INFO [wfs.json] - about to encode JSON
2021-03-10 15:33:10,824 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:33:11,821 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:33:11,828 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@44b0ca59 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:33:11,829 INFO [wfs.json] - about to encode JSON
2021-03-10 15:33:11,945 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:34:28,346 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:34:28,370 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@7b55e893 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:34:28,375 INFO [wfs.json] - about to encode JSON
2021-03-10 15:34:28,543 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:34:32,538 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:34:32,549 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@70a38732 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:34:32,552 INFO [wfs.json] - about to encode JSON
2021-03-10 15:34:32,725 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:35:29,668 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:35:29,675 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@6c95ab8c (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:35:29,677 INFO [wfs.json] - about to encode JSON
2021-03-10 15:35:29,829 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:35:30,875 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:35:30,897 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@32951d43 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:35:30,917 INFO [wfs.json] - about to encode JSON
2021-03-10 15:35:31,092 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:35:33,084 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:35:33,092 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@122f3c8 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:35:33,111 INFO [wfs.json] - about to encode JSON
2021-03-10 15:35:33,289 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:35:37,261 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 15:35:37,286 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@19d89a1b (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 15:35:37,296 INFO [wfs.json] - about to encode JSON
2021-03-10 15:35:37,543 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 15:58:50,440 WARN [servlet.PageNotFound] - No mapping for GET /geoserver/layers
2021-03-10 16:05:05,042 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:05:05,054 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@7a63ddeb (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:05:05,056 INFO [wfs.json] - about to encode JSON
2021-03-10 16:07:00,014 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:07:00,043 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@38cc97b6 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:07:00,048 INFO [wfs.json] - about to encode JSON
2021-03-10 16:07:00,226 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:07:03,907 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:07:03,947 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@7e29bd50 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:07:03,978 INFO [wfs.json] - about to encode JSON
2021-03-10 16:07:04,366 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:07:05,838 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:07:05,846 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@acdb8a4 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:07:05,848 INFO [wfs.json] - about to encode JSON
2021-03-10 16:07:06,035 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:07:08,036 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:07:08,068 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@60dd0417 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:07:08,071 INFO [wfs.json] - about to encode JSON
2021-03-10 16:07:08,198 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:07:12,192 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:07:12,199 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@4312255d (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:07:12,200 INFO [wfs.json] - about to encode JSON
2021-03-10 16:07:12,314 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:07:23,787 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:07:23,819 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@1a418116 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:07:23,822 INFO [wfs.json] - about to encode JSON
2021-03-10 16:07:24,159 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:07:25,281 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:07:25,296 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@7e36ceb3 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:07:25,308 INFO [wfs.json] - about to encode JSON
2021-03-10 16:07:25,561 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:11:37,143 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:11:37,153 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@f6a1fb8 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:11:37,161 INFO [wfs.json] - about to encode JSON
2021-03-10 16:11:37,550 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:11:38,651 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:11:38,659 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@114d65fe (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:11:38,661 INFO [wfs.json] - about to encode JSON
2021-03-10 16:11:38,988 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:11:57,793 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:11:57,826 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@26a3dce5 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:11:57,828 INFO [wfs.json] - about to encode JSON
2021-03-10 16:11:58,045 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:12:02,039 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:12:02,048 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@198c6861 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:12:02,050 INFO [wfs.json] - about to encode JSON
2021-03-10 16:12:02,171 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:12:09,880 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:12:09,898 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@272b6b5e (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:12:09,903 INFO [wfs.json] - about to encode JSON
2021-03-10 16:12:10,130 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:12:14,128 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:12:14,136 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@2ef56319 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:12:14,137 INFO [wfs.json] - about to encode JSON
2021-03-10 16:12:14,259 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:14:18,714 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:14:18,742 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@66d2f1be (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:14:18,744 INFO [wfs.json] - about to encode JSON
2021-03-10 16:14:18,941 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:14:19,948 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:14:19,959 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@3a441132 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:14:19,963 INFO [wfs.json] - about to encode JSON
2021-03-10 16:14:20,110 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:14:22,124 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:14:22,145 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@34ff7c55 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:14:22,159 INFO [wfs.json] - about to encode JSON
2021-03-10 16:14:22,478 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:14:26,439 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:14:26,445 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@739dd1e1 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:14:26,446 INFO [wfs.json] - about to encode JSON
2021-03-10 16:14:26,563 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:48:16,369 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:48:16,386 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@4fccc130 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:48:16,388 INFO [wfs.json] - about to encode JSON
2021-03-10 16:48:16,559 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:48:22,393 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:48:22,409 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@618e17ee (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:48:22,415 INFO [wfs.json] - about to encode JSON
2021-03-10 16:48:22,569 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:49:30,986 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:49:30,992 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@5405c34c (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:49:30,994 INFO [wfs.json] - about to encode JSON
2021-03-10 16:49:31,305 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:49:32,321 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:49:32,329 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@42df2793 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:49:32,331 INFO [wfs.json] - about to encode JSON
2021-03-10 16:49:32,458 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:49:34,454 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:49:34,461 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@6d004a24 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:49:34,463 INFO [wfs.json] - about to encode JSON
2021-03-10 16:49:34,580 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:49:38,569 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:49:38,575 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@1abb66bf (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:49:38,576 INFO [wfs.json] - about to encode JSON
2021-03-10 16:49:38,695 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:49:41,201 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:49:41,211 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@73a8d65a (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:49:41,213 INFO [wfs.json] - about to encode JSON
2021-03-10 16:49:41,342 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:49:42,344 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:49:42,352 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@5634feb4 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:49:42,354 INFO [wfs.json] - about to encode JSON
2021-03-10 16:49:42,459 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:49:44,460 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:49:44,466 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@7b7a9ed3 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:49:44,468 INFO [wfs.json] - about to encode JSON
2021-03-10 16:49:44,580 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:49:48,579 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:49:48,587 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@398502f1 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:49:48,589 INFO [wfs.json] - about to encode JSON
2021-03-10 16:49:48,724 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:52:37,270 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:52:37,295 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@49360c46 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:52:37,306 INFO [wfs.json] - about to encode JSON
2021-03-10 16:52:37,524 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:52:38,519 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:52:38,525 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@3dff3bc8 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:52:38,526 INFO [wfs.json] - about to encode JSON
2021-03-10 16:52:38,638 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:52:40,632 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:52:40,638 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@4e0b9938 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:52:40,645 INFO [wfs.json] - about to encode JSON
2021-03-10 16:52:40,799 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:52:44,784 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:52:44,791 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@65efea0e (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:52:44,793 INFO [wfs.json] - about to encode JSON
2021-03-10 16:52:44,907 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:55:01,329 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:55:01,346 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@1e7584c3 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:55:01,348 INFO [wfs.json] - about to encode JSON
2021-03-10 16:55:01,591 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:55:02,601 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:55:02,607 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@1db81929 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:55:02,608 INFO [wfs.json] - about to encode JSON
2021-03-10 16:55:02,716 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:55:04,712 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:55:04,719 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@2be51922 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:55:04,720 INFO [wfs.json] - about to encode JSON
2021-03-10 16:55:04,824 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:55:08,824 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:55:08,830 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@7f3b04a8 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:55:08,831 INFO [wfs.json] - about to encode JSON
2021-03-10 16:55:08,955 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:55:52,143 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:55:52,172 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@21afd8cb (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:55:52,174 INFO [wfs.json] - about to encode JSON
2021-03-10 16:55:52,521 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:55:53,501 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:55:53,506 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@292303a5 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:55:53,507 INFO [wfs.json] - about to encode JSON
2021-03-10 16:55:53,619 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:55:55,615 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:55:55,622 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@13699bba (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:55:55,623 INFO [wfs.json] - about to encode JSON
2021-03-10 16:55:55,738 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 16:55:59,734 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 16:55:59,742 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@7bb57409 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 16:55:59,743 INFO [wfs.json] - about to encode JSON
2021-03-10 16:55:59,925 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 17:58:48,831 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:ke_counties to ngeo:ke_counties
2021-03-10 17:58:48,845 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:ke_major-towns to ngeo:ke_major-towns
2021-03-10 17:58:48,851 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:kenya_constituencies to ngeo:kenya_constituencies
2021-03-10 17:58:48,856 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:shapefiles_kenyahealth to ngeo:shapefiles_kenyahealth
2021-03-10 17:58:48,859 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:shapefiles_kenyasubcounty to ngeo:shapefiles_kenyasubcounty
2021-03-10 17:58:49,282 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 0, removed: 0, modified: 5
2021-03-10 17:58:54,284 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 0, removed: 0, modified: 3
2021-03-10 17:59:19,509 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-10 17:59:19,728 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[40.70653438568115 : 40.712971687316895, -74.0184760093689 : -74.00191068649292]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic latitude", NORTH], 
  AXIS["Geodetic longitude", EAST], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {FONTANTIALIASING=true, LAYOUT=style-editor-legend}
	Get = true
	Height = 300
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@f1b59c92]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, CRS=EPSG:4326, RANDOM=-242766834, STYLES=point, WIDTH=772, HEIGHT=300, LEGEND_OPTIONS=forceLabels:on;fontAntiAliasing:true, LAYERS=tiger:poi, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, FORMAT_OPTIONS=layout:style-editor-legend;fontAntiAliasing:true, BBOX=40.70653438568115,-74.0184760093689,40.712971687316895,-74.00191068649292, VERSION=1.3.0, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = urn:ogc:def:crs:EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.3.0
	ViewParams = null
	Width = 772
2021-03-10 18:03:03,953 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 18:03:03,962 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@1d31620a (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 18:03:03,963 INFO [wfs.json] - about to encode JSON
2021-03-10 18:14:05,088 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:ke_counties to ngeo:ke_counties
2021-03-10 18:14:05,094 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:ke_major-towns to ngeo:ke_major-towns
2021-03-10 18:14:05,098 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:kenya_constituencies to ngeo:kenya_constituencies
2021-03-10 18:14:05,101 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:shapefiles_kenyahealth to ngeo:shapefiles_kenyahealth
2021-03-10 18:14:05,104 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:shapefiles_kenyasubcounty to ngeo:shapefiles_kenyasubcounty
2021-03-10 18:14:08,320 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:ke_counties to ngeo:ke_counties
2021-03-10 18:14:08,324 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:ke_major-towns to ngeo:ke_major-towns
2021-03-10 18:14:08,327 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:kenya_constituencies to ngeo:kenya_constituencies
2021-03-10 18:14:08,329 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:shapefiles_kenyahealth to ngeo:shapefiles_kenyahealth
2021-03-10 18:14:08,332 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:shapefiles_kenyasubcounty to ngeo:shapefiles_kenyasubcounty
2021-03-10 18:14:09,434 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 0, removed: 0, modified: 5
2021-03-10 18:14:14,437 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 0, removed: 0, modified: 3
2021-03-10 18:14:23,432 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 18:14:23,441 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@61810a45 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 18:14:23,442 INFO [wfs.json] - about to encode JSON
2021-03-10 18:21:01,144 INFO [georss.GeoRSSPoller] - destroy() invoked
2021-03-10 18:21:01,147 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2021-03-10 18:21:01,151 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2021-03-10 18:21:01,152 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2021-03-10 18:21:01,154 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2021-03-10 18:21:01,165 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2021-03-10 18:21:01,166 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2021-03-10 18:21:01,177 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2021-03-10 18:21:01,179 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2021-03-10 18:21:01,179 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2021-03-10 18:21:01,181 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2021-03-10 18:21:01,195 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@7d3d8bcd[Not completed, task = org.geowebcache.storage.blobstore.memory.MemoryBlobStore$BlobStoreTask@588e7f9c] rejected from java.util.concurrent.ThreadPoolExecutor@6e5508e0[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2021-03-10 18:21:01,201 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2021-03-10 18:25:46,478 INFO [org.geoserver] - GeoServer configuration lock is enabled
2021-03-10 18:25:46,586 INFO [org.geoserver] - Loading catalog...
2021-03-10 18:25:46,739 INFO [org.geoserver] - Loaded style 'point'
2021-03-10 18:25:46,741 INFO [org.geoserver] - Loaded style 'population'
2021-03-10 18:25:46,742 INFO [org.geoserver] - Loaded style 'tiger_roads'
2021-03-10 18:25:46,743 INFO [org.geoserver] - Loaded style 'restricted'
2021-03-10 18:25:46,744 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2021-03-10 18:25:46,745 INFO [org.geoserver] - Loaded style 'cite_lakes'
2021-03-10 18:25:46,746 INFO [org.geoserver] - Loaded style 'simple_streams'
2021-03-10 18:25:46,747 INFO [org.geoserver] - Loaded style 'simple_roads'
2021-03-10 18:25:46,748 INFO [org.geoserver] - Loaded style 'polygon'
2021-03-10 18:25:46,749 INFO [org.geoserver] - Loaded style 'dem'
2021-03-10 18:25:46,751 INFO [org.geoserver] - Loaded style 'raster'
2021-03-10 18:25:46,757 INFO [org.geoserver] - Loaded style 'green'
2021-03-10 18:25:46,762 INFO [org.geoserver] - Loaded style 'line'
2021-03-10 18:25:46,767 INFO [org.geoserver] - Loaded style 'generic'
2021-03-10 18:25:46,772 INFO [org.geoserver] - Loaded style 'capitals'
2021-03-10 18:25:46,777 INFO [org.geoserver] - Loaded style 'rain'
2021-03-10 18:25:46,780 INFO [org.geoserver] - Loaded style 'poi'
2021-03-10 18:25:46,781 INFO [org.geoserver] - Loaded style 'grass'
2021-03-10 18:25:46,783 INFO [org.geoserver] - Loaded style 'pophatch'
2021-03-10 18:25:46,783 INFO [org.geoserver] - Loaded style 'giant_polygon'
2021-03-10 18:25:46,784 INFO [org.geoserver] - Loaded style 'burg'
2021-03-10 18:25:46,838 INFO [org.geoserver] - Loaded default workspace ngeo
2021-03-10 18:25:46,879 INFO [org.geoserver] - Loaded workspace 'ngeo'
2021-03-10 18:25:46,887 INFO [org.geoserver] - Loaded workspace 'tiger'
2021-03-10 18:25:46,891 INFO [org.geoserver] - Loaded workspace 'sde'
2021-03-10 18:25:46,894 INFO [org.geoserver] - Loaded workspace 'nurc'
2021-03-10 18:25:46,896 INFO [org.geoserver] - Loaded workspace 'topp'
2021-03-10 18:25:46,902 INFO [org.geoserver] - Loaded workspace 'cite'
2021-03-10 18:25:46,905 INFO [org.geoserver] - Loaded workspace 'sf'
2021-03-10 18:25:46,909 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2021-03-10 18:25:47,702 INFO [org.geoserver] - Loaded data store 'shapefile for kenya towns', enabled
2021-03-10 18:25:49,491 INFO [org.geoserver] - Loaded feature type 'ke_major-towns', enabled
2021-03-10 18:25:49,520 INFO [org.geoserver] - Loaded layer 'ke_major-towns'
2021-03-10 18:25:49,906 INFO [org.geoserver] - Loaded data store 'Ngeo Postgis', enabled
2021-03-10 18:25:49,918 INFO [org.geoserver] - Loaded feature type 'shapefiles_kenyahealth', enabled
2021-03-10 18:25:49,921 INFO [org.geoserver] - Loaded layer 'shapefiles_kenyahealth'
2021-03-10 18:25:49,929 INFO [org.geoserver] - Loaded feature type 'shapefiles_kenyasubcounty', enabled
2021-03-10 18:25:49,933 INFO [org.geoserver] - Loaded layer 'shapefiles_kenyasubcounty'
2021-03-10 18:25:49,941 INFO [org.geoserver] - Loaded feature type 'ke_counties', enabled
2021-03-10 18:25:49,946 INFO [org.geoserver] - Loaded layer 'ke_counties'
2021-03-10 18:25:49,950 INFO [org.geoserver] - Loaded data store 'Kenya Constitutuencies', enabled
2021-03-10 18:25:49,958 INFO [org.geoserver] - Loaded feature type 'kenya_constituencies', enabled
2021-03-10 18:25:49,962 INFO [org.geoserver] - Loaded layer 'kenya_constituencies'
2021-03-10 18:25:50,007 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2021-03-10 18:25:50,017 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2021-03-10 18:25:50,020 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2021-03-10 18:25:50,026 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2021-03-10 18:25:50,028 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2021-03-10 18:25:50,034 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2021-03-10 18:25:50,036 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2021-03-10 18:25:50,042 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2021-03-10 18:25:50,045 INFO [org.geoserver] - Loaded layer 'poi'
2021-03-10 18:25:50,063 INFO [org.geoserver] - Loaded data store 'sf', enabled
2021-03-10 18:25:50,546 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2021-03-10 18:25:50,548 INFO [org.geoserver] - Loaded layer 'streams'
2021-03-10 18:25:50,557 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2021-03-10 18:25:50,564 INFO [org.geoserver] - Loaded layer 'bugsites'
2021-03-10 18:25:50,572 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2021-03-10 18:25:50,574 INFO [org.geoserver] - Loaded layer 'restricted'
2021-03-10 18:25:50,581 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2021-03-10 18:25:50,586 INFO [org.geoserver] - Loaded layer 'roads'
2021-03-10 18:25:50,594 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2021-03-10 18:25:50,596 INFO [org.geoserver] - Loaded layer 'archsites'
2021-03-10 18:25:50,611 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2021-03-10 18:25:50,657 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2021-03-10 18:25:50,659 INFO [org.geoserver] - Loaded layer 'sfdem'
2021-03-10 18:25:50,664 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2021-03-10 18:25:50,686 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2021-03-10 18:25:50,692 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2021-03-10 18:25:50,695 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2021-03-10 18:25:50,703 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2021-03-10 18:25:50,705 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2021-03-10 18:25:50,708 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2021-03-10 18:25:50,731 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2021-03-10 18:25:50,733 INFO [org.geoserver] - Loaded layer 'Pk50095'
2021-03-10 18:25:50,735 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2021-03-10 18:25:50,748 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2021-03-10 18:25:50,750 INFO [org.geoserver] - Loaded layer 'mosaic'
2021-03-10 18:25:50,759 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2021-03-10 18:25:50,772 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2021-03-10 18:25:50,774 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2021-03-10 18:25:50,782 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2021-03-10 18:25:50,784 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2021-03-10 18:25:50,789 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2021-03-10 18:25:50,791 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2021-03-10 18:25:50,795 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2021-03-10 18:25:50,797 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2021-03-10 18:25:50,808 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2021-03-10 18:25:50,818 INFO [org.geoserver] - Loaded feature type 'states', enabled
2021-03-10 18:25:50,820 INFO [org.geoserver] - Loaded layer 'states'
2021-03-10 18:25:50,844 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2021-03-10 18:25:50,849 INFO [org.geoserver] - Loaded layer group 'spearfish'
2021-03-10 18:25:50,851 INFO [org.geoserver] - Loaded layer group 'tasmania'
2021-03-10 18:25:50,857 INFO [org.geoserver] - Read catalog in 4.268 s
2021-03-10 18:25:51,035 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--3898f7df:1781cbe843a:-8000', enabled
2021-03-10 18:25:51,050 INFO [org.geoserver] - Loaded service 'wcs', enabled
2021-03-10 18:25:51,079 INFO [org.geoserver] - Loaded service 'wfs', enabled
2021-03-10 18:25:51,110 INFO [org.geoserver] - Loaded service 'wms', enabled
2021-03-10 18:25:51,164 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory '/home/jp/Desktop/geoserver/bin/../data_dir/gwc'.
2021-03-10 18:25:51,288 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-03-10 18:25:51,289 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-03-10 18:25:51,289 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-03-10 18:25:51,378 WARN [config.XMLConfiguration] - ********************************************************************************
2021-03-10 18:25:51,378 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2021-03-10 18:25:51,378 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2021-03-10 18:25:51,379 WARN [config.XMLConfiguration] - ********************************************************************************
2021-03-10 18:25:51,464 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2021-03-10 18:25:51,467 INFO [config.XMLConfiguration] - Initializing layers from gwc
2021-03-10 18:25:51,551 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2021-03-10 18:25:51,552 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2021-03-10 18:25:51,552 INFO [gwc.layer] - Loading tile layers from gwc-layers
2021-03-10 18:25:51,643 INFO [gwc.layer] - Loaded 27 tile layers in 91.15 ms
2021-03-10 18:25:51,674 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2021-03-10 18:25:51,690 INFO [storage.DefaultStorageFinder] - *********************************************************************************************************************************************
2021-03-10 18:25:51,690 INFO [storage.DefaultStorageFinder] - *** Found Java environment variable GEOSERVER_DATA_DIR set to /home/jp/Desktop/geoserver/bin/../data_dir, using it as the default prefix. ***
2021-03-10 18:25:51,691 INFO [storage.DefaultStorageFinder] - *********************************************************************************************************************************************
2021-03-10 18:25:51,787 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2021-03-10 18:25:51,935 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory '/home/jp/Desktop/geoserver/bin/../data_dir/gwc'.
2021-03-10 18:25:51,950 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory '/home/jp/Desktop/geoserver/bin/../data_dir/gwc'.
2021-03-10 18:25:51,957 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-03-10 18:25:51,972 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-03-10 18:25:51,974 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2021-03-10 18:25:51,975 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2021-03-10 18:25:51,978 INFO [diskquota.DiskQuotaMonitor] - 27 layers attached to global quota 500.0 MB
2021-03-10 18:25:52,031 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2021-03-10 18:25:52,329 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2021-03-10 18:25:52,354 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2021-03-10 18:25:52,367 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2021-03-10 18:25:52,616 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2021-03-10 18:25:52,617 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2021-03-10 18:25:55,336 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2021-03-10 18:25:55,968 WARN [gce.imagemosaic] - Unable to set ordering between tiff readers spi
2021-03-10 18:26:00,513 INFO [geoserver.security] - Start reloading user/groups for service named default
2021-03-10 18:26:00,524 INFO [geoserver.security] - Reloading user/groups successful for service named default
2021-03-10 18:26:00,728 INFO [geoserver.security] - AuthenticationCache Initialized with 1000 Max Entries, 300 seconds idle time, 600 seconds time to live and 3 concurrency level
2021-03-10 18:26:00,728 INFO [geoserver.security] - AuthenticationCache Eviction Task created to run every 600 seconds
2021-03-10 18:36:46,544 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 18:36:48,028 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@52c151fd (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 18:36:48,067 INFO [wfs.json] - about to encode JSON
2021-03-10 18:44:57,750 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 18:44:57,770 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@6a99801d (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 18:44:57,783 INFO [wfs.json] - about to encode JSON
2021-03-10 18:48:49,501 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 18:48:49,593 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@3d4e3a3b (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 18:48:49,599 INFO [wfs.json] - about to encode JSON
2021-03-10 19:17:21,458 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 19:17:21,472 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@4675c300 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 19:17:21,474 INFO [wfs.json] - about to encode JSON
2021-03-10 19:17:21,846 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-03-10 19:17:27,149 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 19:17:27,161 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@3b9d1f5d (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 19:17:27,163 INFO [wfs.json] - about to encode JSON
2021-03-10 19:17:57,372 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 19:17:57,386 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@637fe95d (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 19:17:57,388 INFO [wfs.json] - about to encode JSON
2021-03-10 19:19:08,329 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 19:19:08,397 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@1eb07905 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 19:19:08,400 INFO [wfs.json] - about to encode JSON
2021-03-10 19:20:55,361 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 19:20:55,387 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@dc64b2a (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 19:20:55,399 INFO [wfs.json] - about to encode JSON
2021-03-10 19:20:55,953 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 19:20:56,117 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@7b365ede (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 19:20:56,130 INFO [wfs.json] - about to encode JSON
2021-03-10 19:21:10,417 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 19:21:10,510 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@3303057a (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 19:21:10,516 INFO [wfs.json] - about to encode JSON
2021-03-10 19:22:00,783 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 19:22:00,837 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@26be670a (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 19:22:00,861 INFO [wfs.json] - about to encode JSON
2021-03-10 19:22:34,415 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 19:22:34,464 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@4da54545 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 19:22:34,468 INFO [wfs.json] - about to encode JSON
2021-03-10 19:23:08,158 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 19:23:08,169 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@2ac498e0 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 19:23:08,172 INFO [wfs.json] - about to encode JSON
2021-03-10 19:26:01,385 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 19:26:01,478 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@557d7bfd (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 19:26:01,487 INFO [wfs.json] - about to encode JSON
2021-03-10 19:28:55,826 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 19:28:55,908 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@511e61fa (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 19:28:55,923 INFO [wfs.json] - about to encode JSON
2021-03-10 19:30:56,366 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 19:30:56,457 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@7d3d7c42 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 19:30:56,466 INFO [wfs.json] - about to encode JSON
2021-03-10 19:30:56,729 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 19:30:56,879 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@ca57c7c (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 19:30:56,903 INFO [wfs.json] - about to encode JSON
2021-03-10 19:31:22,120 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 19:31:22,174 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@773ad38a (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 19:31:22,183 INFO [wfs.json] - about to encode JSON
2021-03-10 19:42:42,124 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 19:42:42,155 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@637a6aa1 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 19:42:42,162 INFO [wfs.json] - about to encode JSON
2021-03-10 19:43:02,191 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 19:43:02,245 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@33dc0ccd (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 19:43:02,248 INFO [wfs.json] - about to encode JSON
2021-03-10 19:43:12,409 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 19:43:12,448 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@4334f293 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 19:43:12,467 INFO [wfs.json] - about to encode JSON
2021-03-10 19:44:05,754 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 19:44:05,781 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@782983e8 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 19:44:05,783 INFO [wfs.json] - about to encode JSON
2021-03-10 19:44:08,656 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 19:44:08,688 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@50477636 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 19:44:08,703 INFO [wfs.json] - about to encode JSON
2021-03-10 19:44:28,014 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 19:44:28,051 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@14f19c03 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 19:44:28,056 INFO [wfs.json] - about to encode JSON
2021-03-10 19:47:54,114 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 19:47:54,132 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@645e02b7 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 19:47:54,135 INFO [wfs.json] - about to encode JSON
2021-03-10 19:47:54,223 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 19:47:54,300 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@4ce34321 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 19:47:54,308 INFO [wfs.json] - about to encode JSON
2021-03-10 19:47:58,384 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 19:47:58,423 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@59037b1a (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 19:47:58,426 INFO [wfs.json] - about to encode JSON
2021-03-10 19:51:29,928 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 19:51:29,937 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@b583325 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 19:51:29,939 INFO [wfs.json] - about to encode JSON
2021-03-10 19:51:34,135 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 19:51:34,145 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@49ec8a0f (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 19:51:34,147 INFO [wfs.json] - about to encode JSON
2021-03-10 19:52:24,188 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 19:52:24,221 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@12df6855 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 19:52:24,294 INFO [wfs.json] - about to encode JSON
2021-03-10 19:52:42,645 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 19:52:42,672 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@49fbd30a (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 19:52:42,694 INFO [wfs.json] - about to encode JSON
2021-03-10 20:03:05,839 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 20:03:05,869 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@7366308 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 20:03:05,872 INFO [wfs.json] - about to encode JSON
2021-03-10 20:10:19,750 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 20:10:19,779 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@506a3315 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 20:10:19,781 INFO [wfs.json] - about to encode JSON
2021-03-10 20:11:39,119 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 20:11:39,175 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@def5d8b (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 20:11:39,178 INFO [wfs.json] - about to encode JSON
2021-03-10 21:58:39,517 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 21:58:39,543 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@2bef6be6 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 21:58:39,549 INFO [wfs.json] - about to encode JSON
2021-03-10 22:11:06,503 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 22:11:06,536 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@6ca9788d (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 22:11:06,538 INFO [wfs.json] - about to encode JSON
2021-03-10 22:11:55,715 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 22:11:55,769 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@5a4327ce (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 22:11:55,775 INFO [wfs.json] - about to encode JSON
2021-03-10 22:12:29,720 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 22:12:29,752 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@55eda2eb (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 22:12:29,755 INFO [wfs.json] - about to encode JSON
2021-03-10 22:14:59,174 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 22:14:59,210 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@3e7aa104 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 22:14:59,219 INFO [wfs.json] - about to encode JSON
2021-03-10 22:15:00,234 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 22:15:00,333 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@7c759331 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 22:15:00,356 INFO [wfs.json] - about to encode JSON
2021-03-10 22:16:01,973 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 22:16:02,040 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@74bc0b53 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 22:16:02,049 INFO [wfs.json] - about to encode JSON
2021-03-10 22:17:33,752 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 22:17:33,788 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@66f1dac (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 22:17:33,800 INFO [wfs.json] - about to encode JSON
2021-03-10 22:17:33,854 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 22:17:33,899 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@3173cdc2 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 22:17:33,904 INFO [wfs.json] - about to encode JSON
2021-03-10 22:17:37,953 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 22:17:37,973 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@20f4b4ff (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 22:17:37,980 INFO [wfs.json] - about to encode JSON
2021-03-10 22:18:26,186 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 22:18:26,233 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@59e3953 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 22:18:26,237 INFO [wfs.json] - about to encode JSON
2021-03-10 22:18:26,663 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 22:18:26,694 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@6b00a0b3 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 22:18:26,698 INFO [wfs.json] - about to encode JSON
2021-03-10 22:18:40,774 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 22:18:40,808 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@4eef25f6 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 22:18:40,814 INFO [wfs.json] - about to encode JSON
2021-03-10 22:19:19,927 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 22:19:19,959 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@2e16fb45 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 22:19:19,974 INFO [wfs.json] - about to encode JSON
2021-03-10 22:24:19,449 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 22:24:19,478 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@53825a6f (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 22:24:19,490 INFO [wfs.json] - about to encode JSON
2021-03-10 22:24:19,599 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 22:24:19,613 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@c31a7aa (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 22:24:19,620 INFO [wfs.json] - about to encode JSON
2021-03-10 22:24:38,725 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 22:24:38,749 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@2dc5fef7 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 22:24:38,752 INFO [wfs.json] - about to encode JSON
2021-03-10 22:24:39,298 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 22:24:39,309 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@25d31b82 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 22:24:39,315 INFO [wfs.json] - about to encode JSON
2021-03-10 22:24:46,460 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 22:24:46,490 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@3db5aa9e (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 22:24:46,492 INFO [wfs.json] - about to encode JSON
2021-03-10 22:26:20,140 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 22:26:20,155 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@7ff8311e (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 22:26:20,169 INFO [wfs.json] - about to encode JSON
2021-03-10 22:27:07,001 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 22:27:07,052 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@33a553c5 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 22:27:07,057 INFO [wfs.json] - about to encode JSON
2021-03-10 22:28:07,333 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 22:28:07,346 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@54ccf294 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 22:28:07,364 INFO [wfs.json] - about to encode JSON
2021-03-10 22:28:07,373 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 22:28:07,390 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@7d455887 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 22:28:07,400 INFO [wfs.json] - about to encode JSON
2021-03-10 22:28:07,939 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 22:28:08,091 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@7287dcb0 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 22:28:08,109 INFO [wfs.json] - about to encode JSON
2021-03-10 22:31:06,445 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 22:31:06,467 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@65cbbad8 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 22:31:06,469 INFO [wfs.json] - about to encode JSON
2021-03-10 22:31:06,704 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 22:31:06,713 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@66ee1c73 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 22:31:06,726 INFO [wfs.json] - about to encode JSON
2021-03-10 22:31:12,276 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 22:31:12,288 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@3f5ed71 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 22:31:12,305 INFO [wfs.json] - about to encode JSON
2021-03-10 23:02:42,017 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-10 23:02:42,044 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@51b8bd7d (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-10 23:02:42,054 INFO [wfs.json] - about to encode JSON
2021-03-11 02:45:56,769 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 02:45:56,813 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@15580bb (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-11 02:45:56,814 INFO [wfs.json] - about to encode JSON
2021-03-11 02:46:39,975 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 02:46:39,988 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@3695cb54 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-11 02:46:39,995 INFO [wfs.json] - about to encode JSON
2021-03-11 02:47:45,554 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 02:47:45,562 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@56d922aa (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-11 02:47:45,565 INFO [wfs.json] - about to encode JSON
2021-03-11 03:27:48,992 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 03:27:49,334 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@11b9c1d9 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-11 03:27:49,356 INFO [wfs.json] - about to encode JSON
2021-03-11 07:00:01,810 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 07:00:01,837 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@50430272 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-11 07:00:01,840 INFO [wfs.json] - about to encode JSON
2021-03-11 07:03:26,361 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 07:03:26,378 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@5726526f (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-11 07:03:26,379 INFO [wfs.json] - about to encode JSON
2021-03-11 07:04:53,006 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 07:04:53,046 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@8e7790b (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-11 07:04:53,047 INFO [wfs.json] - about to encode JSON
2021-03-11 07:05:12,685 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 07:05:12,725 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@3b6ba058 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-11 07:05:12,729 INFO [wfs.json] - about to encode JSON
2021-03-11 07:08:08,149 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 07:08:08,176 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@32af4988 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-11 07:08:08,184 INFO [wfs.json] - about to encode JSON
2021-03-11 07:08:19,502 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 07:08:19,547 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@759cb9be (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-11 07:08:19,559 INFO [wfs.json] - about to encode JSON
2021-03-11 07:08:47,332 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 07:08:47,354 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@3490ee83 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-11 07:08:47,359 INFO [wfs.json] - about to encode JSON
2021-03-11 07:08:58,352 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 07:08:58,372 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@5f726ab0 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-11 07:08:58,376 INFO [wfs.json] - about to encode JSON
2021-03-11 07:09:20,931 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 07:09:20,939 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@27602af2 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-11 07:09:20,941 INFO [wfs.json] - about to encode JSON
2021-03-11 07:10:00,221 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 07:10:00,247 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@3cb22458 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-11 07:10:00,256 INFO [wfs.json] - about to encode JSON
2021-03-11 07:10:07,772 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 07:10:07,789 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@7b951623 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-11 07:10:07,791 INFO [wfs.json] - about to encode JSON
2021-03-11 07:11:02,868 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 07:11:02,899 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@696876b1 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-11 07:11:02,902 INFO [wfs.json] - about to encode JSON
2021-03-11 07:11:13,943 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 07:11:13,977 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@e16b12f (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-11 07:11:13,979 INFO [wfs.json] - about to encode JSON
2021-03-11 07:17:22,550 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 07:17:22,559 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@1c46ab46 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-11 07:17:22,560 INFO [wfs.json] - about to encode JSON
2021-03-11 08:13:57,015 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 08:13:57,042 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@21d56315 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-11 08:13:57,044 INFO [wfs.json] - about to encode JSON
2021-03-11 08:14:03,215 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 08:14:03,263 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@2aca20ed (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-11 08:14:03,270 INFO [wfs.json] - about to encode JSON
2021-03-11 08:14:11,584 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 08:14:11,615 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@660ff71f (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-11 08:14:11,627 INFO [wfs.json] - about to encode JSON
2021-03-11 08:16:38,853 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:ke_major-towns to ngeo:ke_major_towns
2021-03-11 08:16:38,919 INFO [geoserver.gwc] - Renaming GWC TileLayer 'ngeo:ke_major-towns' as 'ngeo:ke_major_towns'
2021-03-11 08:16:39,012 INFO [geoserver.gwc] - Saving GeoSeverTileLayer ngeo:ke_major_towns
2021-03-11 08:16:41,489 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 0, removed: 0, modified: 1
2021-03-11 08:17:00,665 INFO [geoserver.gwc] - Saving GeoSeverTileLayer ngeo:ke_major_towns
2021-03-11 08:17:01,497 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 0, removed: 0, modified: 1
2021-03-11 08:17:26,616 INFO [geoserver.gwc] - Saving GeoSeverTileLayer ngeo:kenya_constituencies
2021-03-11 08:17:31,502 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 0, removed: 0, modified: 1
2021-03-11 08:18:24,398 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:shapefiles_kenyahealth to ngeo:ke_health_centres
2021-03-11 08:18:24,406 INFO [geoserver.gwc] - Renaming GWC TileLayer 'ngeo:shapefiles_kenyahealth' as 'ngeo:ke_health_centres'
2021-03-11 08:18:24,521 INFO [geoserver.gwc] - Saving GeoSeverTileLayer ngeo:ke_health_centres
2021-03-11 08:18:26,513 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 0, removed: 0, modified: 1
2021-03-11 08:18:57,662 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:shapefiles_kenyasubcounty to ngeo:ke_subcounties
2021-03-11 08:18:57,668 INFO [geoserver.gwc] - Renaming GWC TileLayer 'ngeo:shapefiles_kenyasubcounty' as 'ngeo:ke_subcounties'
2021-03-11 08:18:57,738 INFO [geoserver.gwc] - Saving GeoSeverTileLayer ngeo:ke_subcounties
2021-03-11 08:19:01,524 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 0, removed: 0, modified: 1
2021-03-11 08:20:35,059 INFO [geoserver.gwc] - Saving GeoSeverTileLayer ngeo:ke_regions
2021-03-11 08:20:36,539 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 1, removed: 0, modified: 0
2021-03-11 08:22:21,185 INFO [geoserver.gwc] - Saving GeoSeverTileLayer ngeo:ke_sublocations
2021-03-11 08:22:21,555 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 1, removed: 0, modified: 0
2021-03-11 08:23:01,980 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 08:23:01,986 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@67cf3c02 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_regions]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_regions
2021-03-11 08:23:02,011 INFO [wfs.json] - about to encode JSON
2021-03-11 08:24:55,984 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 08:24:55,991 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@699b3594 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_regions]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_regions
2021-03-11 08:24:55,993 INFO [wfs.json] - about to encode JSON
2021-03-11 08:29:30,427 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 08:29:30,494 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@2a843c38 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-11 08:29:30,496 INFO [wfs.json] - about to encode JSON
2021-03-11 08:29:33,878 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 08:29:33,891 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@4c24620f (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_regions]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_regions
2021-03-11 08:29:33,893 INFO [wfs.json] - about to encode JSON
2021-03-11 08:32:57,778 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 08:32:57,830 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@1ca4ac51 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-11 08:32:57,835 INFO [wfs.json] - about to encode JSON
2021-03-11 08:36:34,412 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 08:36:34,419 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@533599ff (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-11 08:36:34,421 INFO [wfs.json] - about to encode JSON
2021-03-11 08:36:55,966 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 08:36:55,973 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@1a1ada2d (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_regions]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_regions
2021-03-11 08:36:55,977 INFO [wfs.json] - about to encode JSON
2021-03-11 08:44:07,671 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 08:44:08,118 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=giant_polygon, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=giant_polygon, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=giant_polygon, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@69f8ba96
2021-03-11 08:44:09,424 WARN [wicket.Localizer] - Tried to retrieve a localized string for a component that has not yet been added to the page. This can sometimes lead to an invalid or no localized resource returned. Make sure you are not calling Component#getString() inside your Component's constructor. Offending component: [DimensionEditor [Component id = time]]
2021-03-11 08:44:09,435 WARN [wicket.Localizer] - Tried to retrieve a localized string for a component that has not yet been added to the page. This can sometimes lead to an invalid or no localized resource returned. Make sure you are not calling Component#getString() inside your Component's constructor. Offending component: [DimensionEditor [Component id = elevation]]
2021-03-11 08:44:09,443 WARN [wicket.Localizer] - Tried to retrieve a localized string for a component that has not yet been added to the page. This can sometimes lead to an invalid or no localized resource returned. Make sure you are not calling Component#getString() inside your Component's constructor. Offending component: [DimensionEditor [Component id = time]]
2021-03-11 08:44:09,444 WARN [wicket.Localizer] - Tried to retrieve a localized string for a component that has not yet been added to the page. This can sometimes lead to an invalid or no localized resource returned. Make sure you are not calling Component#getString() inside your Component's constructor. Offending component: [DimensionEditor [Component id = elevation]]
2021-03-11 08:44:28,789 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 08:44:29,391 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[-3.402823466385289E38 : 41.86274719238281, -3.402823466385289E38 : 5.383852481842041]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = application/openlayers
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@76aa3f1e]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, SRS=EPSG:4326, FORMAT=application/openlayers, BBOX=-3.402823466385289E38,-3.402823466385289E38,41.86274719238281,5.383852481842041, VERSION=1.1.0, STYLES=, SERVICE=WMS, WIDTH=768, HEIGHT=768, LAYERS=ngeo:ke_health_centres}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = false
	ValidateSchema = false
	Version = 1.1.0
	ViewParams = null
	Width = 768
2021-03-11 08:44:29,884 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 08:44:29,904 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Missing or invalid requested map size. Parameters WIDTH and HEIGHT shall be present and be integers > 0. Got WIDTH=0, HEIGHT=0
	at org.geoserver.wms.GetMap.assertMandatory(GetMap.java:875)
	at org.geoserver.wms.GetMap.run(GetMap.java:182)
	at org.geoserver.wms.GetMap.run(GetMap.java:123)
	at org.geoserver.wms.DefaultWebMapService.getMap(DefaultWebMapService.java:246)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.kml.WebMapServiceKmlInterceptor.invoke(WebMapServiceKmlInterceptor.java:38)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.gwc.wms.CacheSeedingWebMapService.invoke(CacheSeedingWebMapService.java:55)
	at org.geoserver.gwc.wms.CacheSeedingWebMapService.invoke(CacheSeedingWebMapService.java:31)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.gwc.wms.CachingWebMapService.invoke(CachingWebMapService.java:61)
	at org.geoserver.gwc.wms.CachingWebMapService.invoke(CachingWebMapService.java:41)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy106.getMap(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:877)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:873)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1623)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.eclipse.jetty.servlets.CrossOriginFilter.handle(CrossOriginFilter.java:311)
	at org.eclipse.jetty.servlets.CrossOriginFilter.doFilter(CrossOriginFilter.java:265)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1602)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:540)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1700)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1345)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:480)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1667)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1247)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:220)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:152)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.Server.handle(Server.java:505)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:370)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:267)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)
	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:698)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:804)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-03-11 08:44:53,919 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 08:44:53,976 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[34.07014846801758 : 41.84012222290039, -4.168556722328701 : 4.265939235687256]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = application/openlayers
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@e88ac274]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, SRS=EPSG:4326, FORMAT=application/openlayers, BBOX=34.07014846801758,-4.168556722328701,41.84012222290039,4.265939235687256, VERSION=1.1.0, STYLES=, SERVICE=WMS, WIDTH=707, HEIGHT=768, LAYERS=ngeo:ke_major_towns}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = false
	ValidateSchema = false
	Version = 1.1.0
	ViewParams = null
	Width = 707
2021-03-11 08:44:54,409 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 08:44:54,740 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[30.179443359375 : 45.714111328125, -8.3935546875 : 8.4814453125]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@e88ac274]
	MaxFeatures = null
	Palette = null
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_inimage, FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:4326, BBOX=30.179443359375,-8.3935546875,45.714111328125,8.4814453125, VERSION=1.1.1, STYLES=, WIDTH=707, SERVICE=WMS, HEIGHT=768, TRANSPARENT=true, LAYERS=ngeo:ke_major_towns}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 707
2021-03-11 08:45:01,672 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 08:45:01,688 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[33.909706115722656 : 41.90605926513672, -4.70527172088623 : 5.414107322692871]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = application/openlayers
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@d254c010]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, SRS=EPSG:4326, FORMAT=application/openlayers, BBOX=33.909706115722656,-4.70527172088623,41.90605926513672,5.414107322692871, VERSION=1.1.0, STYLES=, SERVICE=WMS, WIDTH=606, HEIGHT=768, LAYERS=ngeo:ke_regions}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = false
	ValidateSchema = false
	Version = 1.1.0
	ViewParams = null
	Width = 606
2021-03-11 08:45:02,033 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 08:45:02,413 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[31.2451171875 : 44.560546875, -8.0859375 : 8.7890625]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@d254c010]
	MaxFeatures = null
	Palette = null
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_inimage, FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:4326, BBOX=31.2451171875,-8.0859375,44.560546875,8.7890625, VERSION=1.1.1, STYLES=, WIDTH=606, SERVICE=WMS, HEIGHT=768, TRANSPARENT=true, LAYERS=ngeo:ke_regions}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 606
2021-03-11 08:45:10,180 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 08:45:10,207 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[33.92909622192383 : 41.89513397216797, -4.649312496185303 : 5.474469661712646]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = application/openlayers
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@d322a6b5]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, SRS=EPSG:4326, FORMAT=application/openlayers, BBOX=33.92909622192383,-4.649312496185303,41.89513397216797,5.474469661712646, VERSION=1.1.0, STYLES=, SERVICE=WMS, WIDTH=604, HEIGHT=768, LAYERS=ngeo:ke_sublocations}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = false
	ValidateSchema = false
	Version = 1.1.0
	ViewParams = null
	Width = 604
2021-03-11 08:45:10,527 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 08:45:11,362 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[31.26708984375 : 44.53857421875, -8.02001953125 : 8.85498046875]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@d322a6b5]
	MaxFeatures = null
	Palette = null
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_inimage, FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:4326, BBOX=31.26708984375,-8.02001953125,44.53857421875,8.85498046875, VERSION=1.1.1, STYLES=, WIDTH=604, SERVICE=WMS, HEIGHT=768, TRANSPARENT=true, LAYERS=ngeo:ke_sublocations}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 604
2021-03-11 08:45:30,210 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 08:45:30,248 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[-3.402823466385289E38 : 41.86274719238281, -3.402823466385289E38 : 5.383852481842041]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = application/openlayers
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@76aa3f1e]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, SRS=EPSG:4326, FORMAT=application/openlayers, BBOX=-3.402823466385289E38,-3.402823466385289E38,41.86274719238281,5.383852481842041, VERSION=1.1.0, STYLES=, SERVICE=WMS, WIDTH=768, HEIGHT=768, LAYERS=ngeo:ke_health_centres}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = false
	ValidateSchema = false
	Version = 1.1.0
	ViewParams = null
	Width = 768
2021-03-11 08:45:30,573 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 08:45:30,580 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Missing or invalid requested map size. Parameters WIDTH and HEIGHT shall be present and be integers > 0. Got WIDTH=0, HEIGHT=0
	at org.geoserver.wms.GetMap.assertMandatory(GetMap.java:875)
	at org.geoserver.wms.GetMap.run(GetMap.java:182)
	at org.geoserver.wms.GetMap.run(GetMap.java:123)
	at org.geoserver.wms.DefaultWebMapService.getMap(DefaultWebMapService.java:246)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.geoserver.kml.WebMapServiceKmlInterceptor.invoke(WebMapServiceKmlInterceptor.java:38)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.gwc.wms.CacheSeedingWebMapService.invoke(CacheSeedingWebMapService.java:55)
	at org.geoserver.gwc.wms.CacheSeedingWebMapService.invoke(CacheSeedingWebMapService.java:31)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.gwc.wms.CachingWebMapService.invoke(CachingWebMapService.java:61)
	at org.geoserver.gwc.wms.CachingWebMapService.invoke(CachingWebMapService.java:41)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy106.getMap(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:877)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:265)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:873)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1623)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.eclipse.jetty.servlets.CrossOriginFilter.handle(CrossOriginFilter.java:311)
	at org.eclipse.jetty.servlets.CrossOriginFilter.doFilter(CrossOriginFilter.java:265)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1602)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:540)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1700)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1345)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:480)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1667)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1247)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:220)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:152)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.Server.handle(Server.java:505)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:370)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:267)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)
	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:698)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:804)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-03-11 08:51:49,522 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 08:51:49,532 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@63a82ff0 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_regions]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_regions
2021-03-11 08:51:49,535 INFO [wfs.json] - about to encode JSON
2021-03-11 08:53:34,415 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 08:53:34,428 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@53445687 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-11 08:53:34,430 INFO [wfs.json] - about to encode JSON
2021-03-11 09:05:07,833 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 09:05:07,876 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[33.92909622192383 : 41.89513397216797, -4.649312496185303 : 5.474469661712646]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = application/openlayers
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@d322a6b5]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, SRS=EPSG:4326, FORMAT=application/openlayers, BBOX=33.92909622192383,-4.649312496185303,41.89513397216797,5.474469661712646, VERSION=1.1.0, STYLES=, SERVICE=WMS, WIDTH=604, HEIGHT=768, LAYERS=ngeo:ke_sublocations}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = false
	ValidateSchema = false
	Version = 1.1.0
	ViewParams = null
	Width = 604
2021-03-11 09:05:08,290 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 09:05:09,219 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[31.26708984375 : 44.53857421875, -8.02001953125 : 8.85498046875]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@d322a6b5]
	MaxFeatures = null
	Palette = null
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_inimage, FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:4326, BBOX=31.26708984375,-8.02001953125,44.53857421875,8.85498046875, VERSION=1.1.1, STYLES=, WIDTH=604, SERVICE=WMS, HEIGHT=768, TRANSPARENT=true, LAYERS=ngeo:ke_sublocations}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 604
2021-03-11 09:05:21,261 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 09:05:21,386 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_inimage
	ExcludeNodataResults = false
	FeatureCount = 50
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.1.1
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[35.277099609375 : 37.496337890625, 3.087158203125 : 5.306396484375]
 layers: ngeo:ke_sublocations
 styles: polygon
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@d322a6b5]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, STYLES=, WIDTH=101, HEIGHT=101, LAYERS=ngeo:ke_sublocations, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetFeatureInfo, SRS=EPSG:4326, BBOX=35.277099609375,3.087158203125,37.496337890625,5.306396484375, VERSION=1.1.1, X=50, Y=50, SERVICE=WMS, QUERY_LAYERS=ngeo:ke_sublocations, TRANSPARENT=true, FEATURE_COUNT=50}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.1.1
	XPixel = 50
	YPixel = 50
2021-03-11 09:09:41,689 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 09:09:41,727 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[31.26708984375 : 44.53857421875, -8.02001953125 : 8.85498046875]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = [[ sub_name = ngare mara ]]
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = [[ sub_name = ngare mara ]]
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@d322a6b5]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, STYLES=, WIDTH=604, HEIGHT=768, LAYERS=ngeo:ke_sublocations, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, SRS=EPSG:4326, BBOX=31.26708984375,-8.02001953125,44.53857421875,8.85498046875, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true, CQL_FILTER=sub_name='ngare mara'}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 604
2021-03-11 09:10:30,001 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 09:10:30,041 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[31.26708984375 : 44.53857421875, -8.02001953125 : 8.85498046875]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = [[ sub_name is like ngare mara ]]
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = [[ sub_name is like ngare mara ]]
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@d322a6b5]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, STYLES=, WIDTH=604, HEIGHT=768, LAYERS=ngeo:ke_sublocations, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, SRS=EPSG:4326, BBOX=31.26708984375,-8.02001953125,44.53857421875,8.85498046875, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true, CQL_FILTER=sub_name like 'ngare mara'}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 604
2021-03-11 09:10:44,262 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 09:10:44,330 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[31.26708984375 : 44.53857421875, -8.02001953125 : 8.85498046875]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = [[ sub_name is like NGARE MARA ]]
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = [[ sub_name is like NGARE MARA ]]
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@d322a6b5]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, STYLES=, WIDTH=604, HEIGHT=768, LAYERS=ngeo:ke_sublocations, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, SRS=EPSG:4326, BBOX=31.26708984375,-8.02001953125,44.53857421875,8.85498046875, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true, CQL_FILTER=sub_name like 'NGARE MARA'}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 604
2021-03-11 09:10:47,075 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 09:10:47,106 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_inimage
	ExcludeNodataResults = false
	FeatureCount = 50
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.1.1
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[36.529541015625 : 38.748779296875, -0.450439453125 : 1.768798828125]
 layers: ngeo:ke_sublocations
 styles: polygon
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@d322a6b5]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, STYLES=, WIDTH=101, HEIGHT=101, LAYERS=ngeo:ke_sublocations, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetFeatureInfo, SRS=EPSG:4326, BBOX=36.529541015625,-0.450439453125,38.748779296875,1.768798828125, VERSION=1.1.1, X=50, Y=50, SERVICE=WMS, QUERY_LAYERS=ngeo:ke_sublocations, TRANSPARENT=true, CQL_FILTER=sub_name like 'NGARE MARA', FEATURE_COUNT=50}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.1.1
	XPixel = 50
	YPixel = 50
2021-03-11 09:10:55,545 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 09:10:55,631 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[31.26708984375 : 44.53857421875, -8.02001953125 : 8.85498046875]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = [[ sub_name = NGARE MARA ]]
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = [[ sub_name = NGARE MARA ]]
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@d322a6b5]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, STYLES=, WIDTH=604, HEIGHT=768, LAYERS=ngeo:ke_sublocations, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, SRS=EPSG:4326, BBOX=31.26708984375,-8.02001953125,44.53857421875,8.85498046875, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true, CQL_FILTER=sub_name = 'NGARE MARA'}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 604
2021-03-11 09:11:01,877 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 09:11:01,935 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[31.26708984375 : 44.53857421875, -8.02001953125 : 8.85498046875]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = [[ sub_name = NGARE MAR ]]
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = [[ sub_name = NGARE MAR ]]
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@d322a6b5]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, STYLES=, WIDTH=604, HEIGHT=768, LAYERS=ngeo:ke_sublocations, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, SRS=EPSG:4326, BBOX=31.26708984375,-8.02001953125,44.53857421875,8.85498046875, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true, CQL_FILTER=sub_name = 'NGARE MAR'}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 604
2021-03-11 09:12:36,361 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 09:12:36,449 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[31.26708984375 : 44.53857421875, -8.02001953125 : 8.85498046875]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = [[ strToLowerCase([sub_name]) = ngare mara ]]
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = [[ strToLowerCase([sub_name]) = ngare mara ]]
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@d322a6b5]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, STYLES=, WIDTH=604, HEIGHT=768, LAYERS=ngeo:ke_sublocations, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, SRS=EPSG:4326, BBOX=31.26708984375,-8.02001953125,44.53857421875,8.85498046875, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true, CQL_FILTER=strToLowerCase(sub_name) = 'ngare mara'}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 604
2021-03-11 09:12:42,653 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 09:12:42,693 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[31.26708984375 : 44.53857421875, -8.02001953125 : 8.85498046875]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = [[ strToLowerCase([sub_name]) = ngare mar ]]
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = [[ strToLowerCase([sub_name]) = ngare mar ]]
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@d322a6b5]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, STYLES=, WIDTH=604, HEIGHT=768, LAYERS=ngeo:ke_sublocations, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, SRS=EPSG:4326, BBOX=31.26708984375,-8.02001953125,44.53857421875,8.85498046875, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true, CQL_FILTER=strToLowerCase(sub_name) = 'ngare mar'}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 604
2021-03-11 09:12:50,749 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 09:12:50,793 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[31.26708984375 : 44.53857421875, -8.02001953125 : 8.85498046875]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = [[ strToLowerCase([sub_name]) is like ngare mar ]]
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = [[ strToLowerCase([sub_name]) is like ngare mar ]]
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@d322a6b5]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, STYLES=, WIDTH=604, HEIGHT=768, LAYERS=ngeo:ke_sublocations, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, SRS=EPSG:4326, BBOX=31.26708984375,-8.02001953125,44.53857421875,8.85498046875, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true, CQL_FILTER=strToLowerCase(sub_name) like 'ngare mar'}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 604
2021-03-11 09:13:00,797 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 09:13:00,843 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[31.26708984375 : 44.53857421875, -8.02001953125 : 8.85498046875]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = [[ strToLowerCase([sub_name]) is like ngare mar% ]]
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = [[ strToLowerCase([sub_name]) is like ngare mar% ]]
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@d322a6b5]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, STYLES=, WIDTH=604, HEIGHT=768, LAYERS=ngeo:ke_sublocations, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, SRS=EPSG:4326, BBOX=31.26708984375,-8.02001953125,44.53857421875,8.85498046875, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true, CQL_FILTER=strToLowerCase(sub_name) like 'ngare mar%'}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 604
2021-03-11 09:13:07,181 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 09:13:07,224 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[31.26708984375 : 44.53857421875, -8.02001953125 : 8.85498046875]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = [[ strToLowerCase([sub_name]) is like ngare mara ]]
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = [[ strToLowerCase([sub_name]) is like ngare mara ]]
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@d322a6b5]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, STYLES=, WIDTH=604, HEIGHT=768, LAYERS=ngeo:ke_sublocations, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, SRS=EPSG:4326, BBOX=31.26708984375,-8.02001953125,44.53857421875,8.85498046875, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true, CQL_FILTER=strToLowerCase(sub_name) like 'ngare mara'}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 604
2021-03-11 09:15:50,018 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 09:15:50,072 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[33.909706115722656 : 41.90605926513672, -4.70527172088623 : 5.414107322692871]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = application/openlayers
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@d254c010]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, SRS=EPSG:4326, FORMAT=application/openlayers, BBOX=33.909706115722656,-4.70527172088623,41.90605926513672,5.414107322692871, VERSION=1.1.0, STYLES=, SERVICE=WMS, WIDTH=606, HEIGHT=768, LAYERS=ngeo:ke_regions}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = false
	ValidateSchema = false
	Version = 1.1.0
	ViewParams = null
	Width = 606
2021-03-11 09:15:50,654 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 09:15:50,810 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[31.2451171875 : 44.560546875, -8.0859375 : 8.7890625]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@d254c010]
	MaxFeatures = null
	Palette = null
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_inimage, FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:4326, BBOX=31.2451171875,-8.0859375,44.560546875,8.7890625, VERSION=1.1.1, STYLES=, WIDTH=606, SERVICE=WMS, HEIGHT=768, TRANSPARENT=true, LAYERS=ngeo:ke_regions}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 606
2021-03-11 09:16:02,775 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 09:16:02,815 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_inimage
	ExcludeNodataResults = false
	FeatureCount = 50
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.1.1
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[35.782470703125 : 38.001708984375, 2.340087890625 : 4.559326171875]
 layers: ngeo:ke_regions
 styles: polygon
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@d254c010]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, STYLES=, WIDTH=101, HEIGHT=101, LAYERS=ngeo:ke_regions, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetFeatureInfo, SRS=EPSG:4326, BBOX=35.782470703125,2.340087890625,38.001708984375,4.559326171875, VERSION=1.1.1, X=50, Y=50, SERVICE=WMS, QUERY_LAYERS=ngeo:ke_regions, TRANSPARENT=true, FEATURE_COUNT=50}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.1.1
	XPixel = 50
	YPixel = 50
2021-03-11 09:16:29,183 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 09:16:29,238 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[31.2451171875 : 44.560546875, -8.0859375 : 8.7890625]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = [[ strToLowerCase([region]) is like eastern ]]
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = [[ strToLowerCase([region]) is like eastern ]]
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@d254c010]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, STYLES=, WIDTH=606, HEIGHT=768, LAYERS=ngeo:ke_regions, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, SRS=EPSG:4326, BBOX=31.2451171875,-8.0859375,44.560546875,8.7890625, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true, CQL_FILTER=strToLowerCase(region) like 'eastern'}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 606
2021-03-11 09:17:11,717 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 09:17:11,718 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Could not parse CQL filter list.
	at org.geoserver.ows.kvp.CQLFilterKvpParser.parse(CQLFilterKvpParser.java:28)
	at org.geoserver.ows.util.KvpUtils.parse(KvpUtils.java:388)
	at org.geoserver.ows.Dispatcher.parseKVP(Dispatcher.java:1530)
	at org.geoserver.ows.Dispatcher.parseKVP(Dispatcher.java:1526)
	at org.geoserver.ows.Dispatcher.init(Dispatcher.java:316)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:235)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:873)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1623)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.eclipse.jetty.servlets.CrossOriginFilter.handle(CrossOriginFilter.java:311)
	at org.eclipse.jetty.servlets.CrossOriginFilter.doFilter(CrossOriginFilter.java:265)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1602)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:540)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1700)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1345)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:480)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1667)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1247)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:220)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:152)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.Server.handle(Server.java:505)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:370)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:267)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)
	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:698)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:804)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: org.geotools.filter.text.cql2.CQLException: Encountered "like eastern" at line 1, column 24.
Was expecting one of:
    <EOF> 
    <AND> ...
    "or" ...
    ";" ...
    "in" ...
    "*" ...
    "/" ...
    "+" ...
    "-" ...
    <NOT> ...
    "like" <STRING_LITERAL> ...
    "ilike" ...
    "exists" ...
    "does-not-exist" ...
    "is" ...
    "between" ...
    <EQ> ...
    <GT> ...
    <LT> ...
    <GTE> ...
    <LTE> ...
    <NEQ> ...
     Parsing : strToLowerCase(region) like eastern.
	at org.geotools.filter.text.ecql.ECQLCompiler.compileFilterList(ECQLCompiler.java:113)
	at org.geotools.filter.text.commons.CompilerUtil.parseFilterList(CompilerUtil.java:214)
	at org.geotools.filter.text.ecql.ECQL.toFilterList(ECQL.java:176)
	at org.geotools.filter.text.ecql.ECQL.toFilterList(ECQL.java:159)
	at org.geoserver.util.XCQL.toFilterList(XCQL.java:31)
	at org.geoserver.ows.kvp.CQLFilterKvpParser.parse(CQLFilterKvpParser.java:26)
	... 102 more
2021-03-11 09:17:47,013 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 09:17:47,031 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@23eafe05 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ strToLowerCase([region]) is like eastern ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_regions]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ strToLowerCase([region]) is like eastern ]
        typeNames[0] = {ngeo}ke_regions
        filter = [ strToLowerCase([region]) is like eastern ]
2021-03-11 09:17:47,034 INFO [wfs.json] - about to encode JSON
2021-03-11 09:18:02,812 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 09:18:02,813 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Could not parse CQL filter list.
	at org.geoserver.ows.kvp.CQLFilterKvpParser.parse(CQLFilterKvpParser.java:28)
	at org.geoserver.ows.util.KvpUtils.parse(KvpUtils.java:388)
	at org.geoserver.ows.Dispatcher.parseKVP(Dispatcher.java:1530)
	at org.geoserver.ows.Dispatcher.parseKVP(Dispatcher.java:1526)
	at org.geoserver.ows.Dispatcher.init(Dispatcher.java:316)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:235)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:873)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1623)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.eclipse.jetty.servlets.CrossOriginFilter.handle(CrossOriginFilter.java:311)
	at org.eclipse.jetty.servlets.CrossOriginFilter.doFilter(CrossOriginFilter.java:265)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1602)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:540)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1700)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1345)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:480)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1667)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1247)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:220)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:152)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.Server.handle(Server.java:505)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:370)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:267)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)
	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:698)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:804)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: org.geotools.filter.text.cql2.CQLException: Encountered "<EOF>" at line 1, column 0.
Was expecting one of:
    <NOT> ...
    "id" ...
    "in" ...
    <IDENTIFIER> ...
    <DATE_TIME> ...
    "(" ...
    "[" ...
    <DATE> ...
    "-" ...
    <INTEGER_LITERAL> ...
    <FLOATING_LITERAL> ...
    <STRING_LITERAL> ...
    "true" ...
    "false" ...
    "point" ...
    "linestring" ...
    "polygon" ...
    "multipoint" ...
    "multilinestring" ...
    "multipolygon" ...
    "geometrycollection" ...
    "envelope" ...
    "srid" ...
    "include" ...
    "exclude" ...
     Parsing : .
	at org.geotools.filter.text.ecql.ECQLCompiler.compileFilterList(ECQLCompiler.java:113)
	at org.geotools.filter.text.commons.CompilerUtil.parseFilterList(CompilerUtil.java:214)
	at org.geotools.filter.text.ecql.ECQL.toFilterList(ECQL.java:176)
	at org.geotools.filter.text.ecql.ECQL.toFilterList(ECQL.java:159)
	at org.geoserver.util.XCQL.toFilterList(XCQL.java:31)
	at org.geoserver.ows.kvp.CQLFilterKvpParser.parse(CQLFilterKvpParser.java:26)
	... 102 more
2021-03-11 09:36:40,934 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 09:36:40,954 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@14fb861 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_regions]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_regions
2021-03-11 09:36:40,955 INFO [wfs.json] - about to encode JSON
2021-03-11 09:36:46,337 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 09:36:46,347 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@44ac84b9 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ strToLowerCase([region]) is like eastern ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_regions]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ strToLowerCase([region]) is like eastern ]
        typeNames[0] = {ngeo}ke_regions
        filter = [ strToLowerCase([region]) is like eastern ]
2021-03-11 09:36:46,349 INFO [wfs.json] - about to encode JSON
2021-03-11 09:37:13,491 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 09:37:13,525 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@42300576 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ strToLowerCase([region]) is like garissa ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_regions]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ strToLowerCase([region]) is like garissa ]
        typeNames[0] = {ngeo}ke_regions
        filter = [ strToLowerCase([region]) is like garissa ]
2021-03-11 09:37:13,531 INFO [wfs.json] - about to encode JSON
2021-03-11 09:37:19,025 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 09:37:19,035 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@340a8ae7 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_regions]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_regions
2021-03-11 09:37:19,037 INFO [wfs.json] - about to encode JSON
2021-03-11 09:37:19,998 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 09:37:20,009 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@3ff3168e (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-11 09:37:20,011 INFO [wfs.json] - about to encode JSON
2021-03-11 09:37:27,844 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 09:37:27,850 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@4f94f525 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ strToLowerCase([region]) is like garissa ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_regions]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ strToLowerCase([region]) is like garissa ]
        typeNames[0] = {ngeo}ke_regions
        filter = [ strToLowerCase([region]) is like garissa ]
2021-03-11 09:37:27,852 INFO [wfs.json] - about to encode JSON
2021-03-11 09:37:43,832 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 09:37:43,850 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@5a62771a (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ strToLowerCase([region]) is like garissa ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_regions]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ strToLowerCase([region]) is like garissa ]
        typeNames[0] = {ngeo}ke_regions
        filter = [ strToLowerCase([region]) is like garissa ]
2021-03-11 09:37:43,855 INFO [wfs.json] - about to encode JSON
2021-03-11 09:38:04,092 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 09:38:04,106 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@3c02e00f (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ strToLowerCase([region]) is like garissa ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_regions]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ strToLowerCase([region]) is like garissa ]
        typeNames[0] = {ngeo}ke_regions
        filter = [ strToLowerCase([region]) is like garissa ]
2021-03-11 09:38:04,109 INFO [wfs.json] - about to encode JSON
2021-03-11 09:38:19,876 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 09:38:19,926 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[31.2451171875 : 44.560546875, -8.0859375 : 8.7890625]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = [[ strToLowerCase([region]) is like garissa ]]
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = [[ strToLowerCase([region]) is like garissa ]]
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@d254c010]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, STYLES=, WIDTH=606, HEIGHT=768, LAYERS=ngeo:ke_regions, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, SRS=EPSG:4326, BBOX=31.2451171875,-8.0859375,44.560546875,8.7890625, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true, CQL_FILTER=strToLowerCase(region) like 'garissa'}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 606
2021-03-11 09:38:32,027 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 09:38:32,120 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[31.2451171875 : 44.560546875, -8.0859375 : 8.7890625]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@d254c010]
	MaxFeatures = null
	Palette = null
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_inimage, FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:4326, BBOX=31.2451171875,-8.0859375,44.560546875,8.7890625, VERSION=1.1.1, STYLES=, WIDTH=606, SERVICE=WMS, HEIGHT=768, TRANSPARENT=true, LAYERS=ngeo:ke_regions}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 606
2021-03-11 09:38:36,852 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 09:38:36,874 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_inimage
	ExcludeNodataResults = false
	FeatureCount = 50
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.1.1
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[38.748779296875 : 40.968017578125, -1.109619140625 : 1.109619140625]
 layers: ngeo:ke_regions
 styles: polygon
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@d254c010]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, STYLES=, WIDTH=101, HEIGHT=101, LAYERS=ngeo:ke_regions, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetFeatureInfo, SRS=EPSG:4326, BBOX=38.748779296875,-1.109619140625,40.968017578125,1.109619140625, VERSION=1.1.1, X=50, Y=50, SERVICE=WMS, QUERY_LAYERS=ngeo:ke_regions, TRANSPARENT=true, FEATURE_COUNT=50}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.1.1
	XPixel = 50
	YPixel = 50
2021-03-11 09:38:39,092 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 09:38:39,120 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_inimage
	ExcludeNodataResults = false
	FeatureCount = 50
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.1.1
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[37.979736328125 : 40.198974609375, -3.021240234375 : -0.802001953125]
 layers: ngeo:ke_regions
 styles: polygon
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@d254c010]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, STYLES=, WIDTH=101, HEIGHT=101, LAYERS=ngeo:ke_regions, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetFeatureInfo, SRS=EPSG:4326, BBOX=37.979736328125,-3.021240234375,40.198974609375,-0.802001953125, VERSION=1.1.1, X=50, Y=50, SERVICE=WMS, QUERY_LAYERS=ngeo:ke_regions, TRANSPARENT=true, FEATURE_COUNT=50}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.1.1
	XPixel = 50
	YPixel = 50
2021-03-11 09:39:02,090 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 09:39:02,098 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@705fdaf2 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_regions]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_regions
2021-03-11 09:39:02,104 INFO [wfs.json] - about to encode JSON
2021-03-11 09:39:06,845 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 09:39:06,858 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@4ae7539a (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ strToLowerCase([region]) is like coast ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_regions]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ strToLowerCase([region]) is like coast ]
        typeNames[0] = {ngeo}ke_regions
        filter = [ strToLowerCase([region]) is like coast ]
2021-03-11 09:39:06,861 INFO [wfs.json] - about to encode JSON
2021-03-11 09:54:48,419 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 09:54:48,464 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[33.909706115722656 : 41.90605926513672, -4.70527172088623 : 5.414107322692871]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = application/openlayers
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@c46f92ab]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, SRS=EPSG:4326, FORMAT=application/openlayers, BBOX=33.909706115722656,-4.70527172088623,41.90605926513672,5.414107322692871, VERSION=1.1.0, STYLES=, SERVICE=WMS, WIDTH=606, HEIGHT=768, LAYERS=ngeo:ke_counties}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = false
	ValidateSchema = false
	Version = 1.1.0
	ViewParams = null
	Width = 606
2021-03-11 09:54:48,797 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 09:54:48,961 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[31.2451171875 : 44.560546875, -8.0859375 : 8.7890625]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@c46f92ab]
	MaxFeatures = null
	Palette = null
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_inimage, FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:4326, BBOX=31.2451171875,-8.0859375,44.560546875,8.7890625, VERSION=1.1.1, STYLES=, WIDTH=606, SERVICE=WMS, HEIGHT=768, TRANSPARENT=true, LAYERS=ngeo:ke_counties}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 606
2021-03-11 09:54:55,451 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 09:54:55,471 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_inimage
	ExcludeNodataResults = false
	FeatureCount = 50
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.1.1
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[37.298583984375 : 39.517822265625, -0.208740234375 : 2.010498046875]
 layers: ngeo:ke_counties
 styles: polygon
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@c46f92ab]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, STYLES=, WIDTH=101, HEIGHT=101, LAYERS=ngeo:ke_counties, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetFeatureInfo, SRS=EPSG:4326, BBOX=37.298583984375,-0.208740234375,39.517822265625,2.010498046875, VERSION=1.1.1, X=50, Y=50, SERVICE=WMS, QUERY_LAYERS=ngeo:ke_counties, TRANSPARENT=true, FEATURE_COUNT=50}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.1.1
	XPixel = 50
	YPixel = 50
2021-03-11 10:04:32,944 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 10:04:32,955 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@5d75fb71 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ strToLowerCase([counties]) is like isiolo ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ strToLowerCase([counties]) is like isiolo ]
        typeNames[0] = {ngeo}ke_counties
        filter = [ strToLowerCase([counties]) is like isiolo ]
2021-03-11 10:04:32,956 INFO [wfs.json] - about to encode JSON
2021-03-11 10:04:52,116 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 10:04:52,134 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@1fd58707 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ strToLowerCase([counties]) is like isiolo ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ strToLowerCase([counties]) is like isiolo ]
        typeNames[0] = {ngeo}ke_counties
        filter = [ strToLowerCase([counties]) is like isiolo ]
2021-03-11 10:04:52,137 INFO [wfs.json] - about to encode JSON
2021-03-11 10:06:39,030 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 10:06:39,037 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@7197ec5a (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_regions]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_regions
2021-03-11 10:06:39,038 INFO [wfs.json] - about to encode JSON
2021-03-11 10:06:43,769 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 10:06:43,779 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@ab4ef35 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-11 10:06:43,781 INFO [wfs.json] - about to encode JSON
2021-03-11 10:07:13,251 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 10:07:13,284 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@1d3d5f6c (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ strToLowerCase([counties]) is like isiolo ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ strToLowerCase([counties]) is like isiolo ]
        typeNames[0] = {ngeo}ke_counties
        filter = [ strToLowerCase([counties]) is like isiolo ]
2021-03-11 10:07:13,286 INFO [wfs.json] - about to encode JSON
2021-03-11 10:07:18,942 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 10:07:18,956 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@4f95a633 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ strToLowerCase([counties]) is like isiolo ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ strToLowerCase([counties]) is like isiolo ]
        typeNames[0] = {ngeo}ke_counties
        filter = [ strToLowerCase([counties]) is like isiolo ]
2021-03-11 10:07:18,958 INFO [wfs.json] - about to encode JSON
2021-03-11 10:14:23,590 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 10:14:23,598 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[33.92909622192383 : 41.89513397216797, -4.649312496185303 : 5.474469661712646]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = application/openlayers
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@d322a6b5]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, SRS=EPSG:4326, FORMAT=application/openlayers, BBOX=33.92909622192383,-4.649312496185303,41.89513397216797,5.474469661712646, VERSION=1.1.0, STYLES=, SERVICE=WMS, WIDTH=604, HEIGHT=768, LAYERS=ngeo:ke_sublocations}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = false
	ValidateSchema = false
	Version = 1.1.0
	ViewParams = null
	Width = 604
2021-03-11 10:14:23,888 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 10:14:24,316 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[31.26708984375 : 44.53857421875, -8.02001953125 : 8.85498046875]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@d322a6b5]
	MaxFeatures = null
	Palette = null
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_inimage, FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:4326, BBOX=31.26708984375,-8.02001953125,44.53857421875,8.85498046875, VERSION=1.1.1, STYLES=, WIDTH=604, SERVICE=WMS, HEIGHT=768, TRANSPARENT=true, LAYERS=ngeo:ke_sublocations}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 604
2021-03-11 10:14:31,076 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 10:14:31,103 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_inimage
	ExcludeNodataResults = false
	FeatureCount = 50
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.1.1
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[36.990966796875 : 39.210205078125, 0.098876953125 : 2.318115234375]
 layers: ngeo:ke_sublocations
 styles: polygon
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@d322a6b5]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, STYLES=, WIDTH=101, HEIGHT=101, LAYERS=ngeo:ke_sublocations, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetFeatureInfo, SRS=EPSG:4326, BBOX=36.990966796875,0.098876953125,39.210205078125,2.318115234375, VERSION=1.1.1, X=50, Y=50, SERVICE=WMS, QUERY_LAYERS=ngeo:ke_sublocations, TRANSPARENT=true, FEATURE_COUNT=50}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.1.1
	XPixel = 50
	YPixel = 50
2021-03-11 10:15:03,666 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 10:15:03,700 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[31.26708984375 : 44.53857421875, -8.02001953125 : 8.85498046875]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = [[ strToLowerCase([distname]) is like isiolo ]]
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = [[ strToLowerCase([distname]) is like isiolo ]]
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@d322a6b5]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, STYLES=, WIDTH=604, HEIGHT=768, LAYERS=ngeo:ke_sublocations, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, SRS=EPSG:4326, BBOX=31.26708984375,-8.02001953125,44.53857421875,8.85498046875, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true, CQL_FILTER=strToLowerCase(distname) like 'isiolo'}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 604
2021-03-11 10:15:20,455 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 10:15:20,484 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[31.26708984375 : 44.53857421875, -8.02001953125 : 8.85498046875]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = [[ strToLowerCase([locname]) is like isiolo ]]
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = [[ strToLowerCase([locname]) is like isiolo ]]
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@d322a6b5]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, STYLES=, WIDTH=604, HEIGHT=768, LAYERS=ngeo:ke_sublocations, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, SRS=EPSG:4326, BBOX=31.26708984375,-8.02001953125,44.53857421875,8.85498046875, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true, CQL_FILTER=strToLowerCase(locname) like 'isiolo'}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 604
2021-03-11 10:15:52,882 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 10:15:52,916 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[31.26708984375 : 44.53857421875, -8.02001953125 : 8.85498046875]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = [[ strToLowerCase([locname]) is like bisan biliku ]]
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = [[ strToLowerCase([locname]) is like bisan biliku ]]
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@d322a6b5]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, STYLES=, WIDTH=604, HEIGHT=768, LAYERS=ngeo:ke_sublocations, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, SRS=EPSG:4326, BBOX=31.26708984375,-8.02001953125,44.53857421875,8.85498046875, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true, CQL_FILTER=strToLowerCase(locname) like 'bisan biliku'}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 604
2021-03-11 10:16:07,763 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 10:16:07,796 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[31.26708984375 : 44.53857421875, -8.02001953125 : 8.85498046875]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = [[ strToLowerCase([locname]) is like ngare mara ]]
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = [[ strToLowerCase([locname]) is like ngare mara ]]
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 768
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@d322a6b5]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, STYLES=, WIDTH=604, HEIGHT=768, LAYERS=ngeo:ke_sublocations, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, SRS=EPSG:4326, BBOX=31.26708984375,-8.02001953125,44.53857421875,8.85498046875, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true, CQL_FILTER=strToLowerCase(locname) like 'ngare mara'}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=polygon]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 604
2021-03-11 10:16:26,586 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 10:16:26,587 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Could not parse CQL filter list.
	at org.geoserver.ows.kvp.CQLFilterKvpParser.parse(CQLFilterKvpParser.java:28)
	at org.geoserver.ows.util.KvpUtils.parse(KvpUtils.java:388)
	at org.geoserver.ows.Dispatcher.parseKVP(Dispatcher.java:1530)
	at org.geoserver.ows.Dispatcher.parseKVP(Dispatcher.java:1526)
	at org.geoserver.ows.Dispatcher.init(Dispatcher.java:316)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:235)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:873)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1623)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:26)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:69)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:66)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:41)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:37)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:51)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:70)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:74)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:101)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:47)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:46)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610)
	at org.eclipse.jetty.servlets.CrossOriginFilter.handle(CrossOriginFilter.java:311)
	at org.eclipse.jetty.servlets.CrossOriginFilter.doFilter(CrossOriginFilter.java:265)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1602)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:540)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1700)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1345)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:480)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1667)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1247)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:220)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:152)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.Server.handle(Server.java:505)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:370)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:267)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)
	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:698)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:804)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: org.geotools.filter.text.cql2.CQLException: Encountered "," at line 1, column 42.
Was expecting one of:
    <EOF> 
    <AND> ...
    "or" ...
    ";" ...
     Parsing : strToLowerCase(locname) like 'ngare mara', strToLowerCase(locname) like 'bisan biliku'.
	at org.geotools.filter.text.ecql.ECQLCompiler.compileFilterList(ECQLCompiler.java:113)
	at org.geotools.filter.text.commons.CompilerUtil.parseFilterList(CompilerUtil.java:214)
	at org.geotools.filter.text.ecql.ECQL.toFilterList(ECQL.java:176)
	at org.geotools.filter.text.ecql.ECQL.toFilterList(ECQL.java:159)
	at org.geoserver.util.XCQL.toFilterList(XCQL.java:31)
	at org.geoserver.ows.kvp.CQLFilterKvpParser.parse(CQLFilterKvpParser.java:26)
	... 102 more
2021-03-11 10:25:02,370 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 10:25:02,405 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@2d0e8341 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ strToLowerCase([sub_name]) is like ngare mara ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_sublocations]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ strToLowerCase([sub_name]) is like ngare mara ]
        typeNames[0] = {ngeo}ke_sublocations
        filter = [ strToLowerCase([sub_name]) is like ngare mara ]
2021-03-11 10:25:02,406 INFO [wfs.json] - about to encode JSON
2021-03-11 10:26:25,608 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 10:26:25,630 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@6ece998d (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ strToLowerCase([sub_name]) is like ngare mara ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_sublocations]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ strToLowerCase([sub_name]) is like ngare mara ]
        typeNames[0] = {ngeo}ke_sublocations
        filter = [ strToLowerCase([sub_name]) is like ngare mara ]
2021-03-11 10:26:25,632 INFO [wfs.json] - about to encode JSON
2021-03-11 10:26:39,233 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 10:26:39,252 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@5d1837a8 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ strToLowerCase([counties]) is like isiolo ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ strToLowerCase([counties]) is like isiolo ]
        typeNames[0] = {ngeo}ke_counties
        filter = [ strToLowerCase([counties]) is like isiolo ]
2021-03-11 10:26:39,258 INFO [wfs.json] - about to encode JSON
2021-03-11 10:26:50,858 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 10:26:50,906 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@13ceb6e2 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ strToLowerCase([sub_name]) is like ngare mara ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_sublocations]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ strToLowerCase([sub_name]) is like ngare mara ]
        typeNames[0] = {ngeo}ke_sublocations
        filter = [ strToLowerCase([sub_name]) is like ngare mara ]
2021-03-11 10:26:50,908 INFO [wfs.json] - about to encode JSON
2021-03-11 10:31:03,700 INFO [geoserver.gwc] - Saving GeoSeverTileLayer ngeo:projects_project
2021-03-11 10:31:08,314 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 1, removed: 0, modified: 0
2021-03-11 10:31:22,091 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 10:31:22,096 INFO [geoserver.wms] - 
Request: getLegendGraphic
	BaseUrl = http://localhost:8080/geoserver/
	Env = {}
	Exceptions = SE_XML
	FeatureType = null
	Format = image/png
	Get = false
	Height = 20
	Kvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=point, WIDTH=20, HEIGHT=20}
	Layers = []
	LegendOptions = {}
	Legends = [LegendRequest [layer=, name= styleName=point, title=null, legendInfo=null]]
	Locale = null
	RawKvp = {STRICT=false, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.0.0, STYLE=point, WIDTH=20, HEIGHT=20}
	Request = GetLegendGraphic
	RequestCharset = null
	Scale = -1.0
	Strict = false
	Transparent = false
	Version = 1.0.0
	Width = 20
	Wms = org.geoserver.wms.WMS@69f8ba96
2021-03-11 10:31:38,683 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 10:31:38,701 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[37.633663177490234 : 40.10009765625, -0.615222573280334 : 0.578145742416382]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = application/openlayers
	FormatOptions = {}
	Get = true
	Height = 371
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@42e84656]
	MaxFeatures = null
	Palette = null
	RawKvp = {REQUEST=GetMap, SRS=EPSG:4326, FORMAT=application/openlayers, BBOX=37.633663177490234,-0.615222573280334,40.10009765625,0.578145742416382, VERSION=1.1.0, STYLES=, SERVICE=WMS, WIDTH=768, HEIGHT=371, LAYERS=ngeo:projects_project}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = false
	ValidateSchema = false
	Version = 1.1.0
	ViewParams = null
	Width = 768
2021-03-11 10:31:39,001 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 10:31:39,054 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[36.7547607421875 : 40.9735107421875, -1.03546142578125 : 1.00250244140625]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 371
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@42e84656]
	MaxFeatures = null
	Palette = null
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_inimage, FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:4326, BBOX=36.7547607421875,-1.03546142578125,40.9735107421875,1.00250244140625, VERSION=1.1.1, STYLES=, WIDTH=768, SERVICE=WMS, HEIGHT=371, TRANSPARENT=true, LAYERS=ngeo:projects_project}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 768
2021-03-11 10:31:42,832 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 10:31:42,848 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_inimage
	ExcludeNodataResults = false
	FeatureCount = 50
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.1.1
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[37.35076904296875 : 37.90557861328125, 0.3076171875 : 0.8624267578125]
 layers: ngeo:projects_project
 styles: point
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@42e84656]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, STYLES=, WIDTH=101, HEIGHT=101, LAYERS=ngeo:projects_project, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetFeatureInfo, SRS=EPSG:4326, BBOX=37.35076904296875,0.3076171875,37.90557861328125,0.8624267578125, VERSION=1.1.1, X=50, Y=50, SERVICE=WMS, QUERY_LAYERS=ngeo:projects_project, TRANSPARENT=true, FEATURE_COUNT=50}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.1.1
	XPixel = 50
	YPixel = 50
2021-03-11 10:31:50,220 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 10:31:50,239 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_inimage
	ExcludeNodataResults = false
	FeatureCount = 50
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.1.1
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[38.24615478515625 : 38.80096435546875, 0.274658203125 : 0.8294677734375]
 layers: ngeo:projects_project
 styles: point
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@42e84656]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, STYLES=, WIDTH=101, HEIGHT=101, LAYERS=ngeo:projects_project, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetFeatureInfo, SRS=EPSG:4326, BBOX=38.24615478515625,0.274658203125,38.80096435546875,0.8294677734375, VERSION=1.1.1, X=50, Y=50, SERVICE=WMS, QUERY_LAYERS=ngeo:projects_project, TRANSPARENT=true, FEATURE_COUNT=50}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.1.1
	XPixel = 50
	YPixel = 50
2021-03-11 10:31:52,121 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 10:31:52,138 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_inimage
	ExcludeNodataResults = false
	FeatureCount = 50
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.1.1
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[38.36151123046875 : 38.91632080078125, -0.186767578125 : 0.3680419921875]
 layers: ngeo:projects_project
 styles: point
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@42e84656]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, STYLES=, WIDTH=101, HEIGHT=101, LAYERS=ngeo:projects_project, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetFeatureInfo, SRS=EPSG:4326, BBOX=38.36151123046875,-0.186767578125,38.91632080078125,0.3680419921875, VERSION=1.1.1, X=50, Y=50, SERVICE=WMS, QUERY_LAYERS=ngeo:projects_project, TRANSPARENT=true, FEATURE_COUNT=50}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.1.1
	XPixel = 50
	YPixel = 50
2021-03-11 10:31:55,930 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 10:31:55,952 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_inimage
	ExcludeNodataResults = false
	FeatureCount = 50
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.1.1
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[39.37774658203125 : 39.93255615234375, -0.7635498046875 : -0.208740234375]
 layers: ngeo:projects_project
 styles: point
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@42e84656]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, STYLES=, WIDTH=101, HEIGHT=101, LAYERS=ngeo:projects_project, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetFeatureInfo, SRS=EPSG:4326, BBOX=39.37774658203125,-0.7635498046875,39.93255615234375,-0.208740234375, VERSION=1.1.1, X=50, Y=50, SERVICE=WMS, QUERY_LAYERS=ngeo:projects_project, TRANSPARENT=true, FEATURE_COUNT=50}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.1.1
	XPixel = 50
	YPixel = 50
2021-03-11 10:32:29,858 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 10:32:29,875 INFO [geoserver.wms] - 
Request: getFeatureInfo
	BaseUrl = http://localhost:8080/geoserver/
	Exceptions = application/vnd.ogc.se_inimage
	ExcludeNodataResults = false
	FeatureCount = 50
	Get = false
	GetMapRequest = 
GetMap Request
 version: 1.1.1
 output format: image/png
 width height: 101,101
 bbox: SRSEnvelope[37.34527587890625 : 37.90008544921875, 0.3131103515625 : 0.867919921875]
 layers: ngeo:projects_project
 styles: point
	InfoFormat = text/html
	PropertyNames = null
	QueryLayers = [org.geoserver.wms.MapLayerInfo@42e84656]
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, STYLES=, WIDTH=101, HEIGHT=101, LAYERS=ngeo:projects_project, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetFeatureInfo, SRS=EPSG:4326, BBOX=37.34527587890625,0.3131103515625,37.90008544921875,0.867919921875, VERSION=1.1.1, X=50, Y=50, SERVICE=WMS, QUERY_LAYERS=ngeo:projects_project, TRANSPARENT=true, FEATURE_COUNT=50}
	Request = GetFeatureInfo
	RequestCharset = null
	Version = 1.1.1
	XPixel = 50
	YPixel = 50
2021-03-11 10:33:06,624 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-03-11 10:33:06,651 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[36.7547607421875 : 40.9735107421875, -1.03546142578125 : 1.00250244140625]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = [[ field_officer_id = 4 ]]
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Elevation = []
	Env = {}
	Exceptions = application/vnd.ogc.se_inimage
	FeatureId = null
	FeatureVersion = null
	Filter = [[ field_officer_id = 4 ]]
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 371
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@42e84656]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, STYLES=, WIDTH=768, HEIGHT=371, LAYERS=ngeo:projects_project, EXCEPTIONS=application/vnd.ogc.se_inimage, REQUEST=GetMap, SRS=EPSG:4326, BBOX=36.7547607421875,-1.03546142578125,40.9735107421875,1.00250244140625, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true, CQL_FILTER=field_officer_id=4}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:4326
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=point]]
	StyleUrl = null
	StyleVersion = null
	Tiled = false
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 768
2021-03-11 10:41:16,580 INFO [geoserver.gwc] - Renaming GeoSeverTileLayer ngeo:projects_project to ngeo:user_projects
2021-03-11 10:41:16,585 INFO [geoserver.gwc] - Renaming GWC TileLayer 'ngeo:projects_project' as 'ngeo:user_projects'
2021-03-11 10:41:16,735 INFO [geoserver.gwc] - Saving GeoSeverTileLayer ngeo:user_projects
2021-03-11 10:41:18,394 INFO [platform.resource] - Notifying ENTRY_MODIFY change on /home/jp/Desktop/geoserver/bin/../data_dir/gwc-layers. Created: 0, removed: 0, modified: 1
2021-03-11 10:43:58,754 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 10:43:58,872 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@2666a59e (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ strToLowerCase([sub_name]) is like ngare mara ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_sublocations]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ strToLowerCase([sub_name]) is like ngare mara ]
        typeNames[0] = {ngeo}ke_sublocations
        filter = [ strToLowerCase([sub_name]) is like ngare mara ]
2021-03-11 10:43:58,876 INFO [wfs.json] - about to encode JSON
2021-03-11 10:49:37,145 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 10:49:37,157 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@344c7752 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_regions]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_regions
2021-03-11 10:49:37,158 INFO [wfs.json] - about to encode JSON
2021-03-11 10:52:42,189 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 10:52:42,216 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@1d460b44 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ strToLowerCase([sub_name]) is like ngare mara ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_sublocations]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ strToLowerCase([sub_name]) is like ngare mara ]
        typeNames[0] = {ngeo}ke_sublocations
        filter = [ strToLowerCase([sub_name]) is like ngare mara ]
2021-03-11 10:52:42,218 INFO [wfs.json] - about to encode JSON
2021-03-11 10:52:44,232 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 10:52:44,243 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@18d23e98 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ field_officer_id = 4 ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}user_projects]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ field_officer_id = 4 ]
        typeNames[0] = {ngeo}user_projects
        filter = [ field_officer_id = 4 ]
2021-03-11 10:52:44,250 INFO [wfs.json] - about to encode JSON
2021-03-11 10:57:51,731 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 10:57:51,793 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@11c9a212 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ strToLowerCase([sub_name]) is like ngare mara ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_sublocations]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ strToLowerCase([sub_name]) is like ngare mara ]
        typeNames[0] = {ngeo}ke_sublocations
        filter = [ strToLowerCase([sub_name]) is like ngare mara ]
2021-03-11 10:57:51,794 INFO [wfs.json] - about to encode JSON
2021-03-11 10:59:47,304 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 10:59:47,378 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@eb531cc (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ strToLowerCase([sub_name]) is like ngare mara ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_sublocations]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ strToLowerCase([sub_name]) is like ngare mara ]
        typeNames[0] = {ngeo}ke_sublocations
        filter = [ strToLowerCase([sub_name]) is like ngare mara ]
2021-03-11 10:59:47,386 INFO [wfs.json] - about to encode JSON
2021-03-11 11:01:47,462 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 11:01:47,483 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@321d1500 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ strToLowerCase([sub_name]) is like ngare mara ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_sublocations]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ strToLowerCase([sub_name]) is like ngare mara ]
        typeNames[0] = {ngeo}ke_sublocations
        filter = [ strToLowerCase([sub_name]) is like ngare mara ]
2021-03-11 11:01:47,484 INFO [wfs.json] - about to encode JSON
2021-03-11 11:01:49,339 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 11:01:49,349 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@3b021173 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ field_officer_id = 4 ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}user_projects]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ field_officer_id = 4 ]
        typeNames[0] = {ngeo}user_projects
        filter = [ field_officer_id = 4 ]
2021-03-11 11:01:49,351 INFO [wfs.json] - about to encode JSON
2021-03-11 11:01:51,476 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 11:01:51,487 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@6cfa56c5 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ field_officer_id = 4 ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}user_projects]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ field_officer_id = 4 ]
        typeNames[0] = {ngeo}user_projects
        filter = [ field_officer_id = 4 ]
2021-03-11 11:01:51,488 INFO [wfs.json] - about to encode JSON
2021-03-11 11:02:03,507 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 11:02:03,527 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@7b39fd6a (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ field_officer_id = 4 ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}user_projects]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ field_officer_id = 4 ]
        typeNames[0] = {ngeo}user_projects
        filter = [ field_officer_id = 4 ]
2021-03-11 11:02:03,531 INFO [wfs.json] - about to encode JSON
2021-03-11 11:03:36,471 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 11:03:36,483 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@7686efe6 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ field_officer_id = 4 ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}user_projects]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ field_officer_id = 4 ]
        typeNames[0] = {ngeo}user_projects
        filter = [ field_officer_id = 4 ]
2021-03-11 11:03:36,485 INFO [wfs.json] - about to encode JSON
2021-03-11 11:03:45,456 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 11:03:45,468 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@2f707a0f (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ field_officer_id = 4 ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}user_projects]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ field_officer_id = 4 ]
        typeNames[0] = {ngeo}user_projects
        filter = [ field_officer_id = 4 ]
2021-03-11 11:03:45,474 INFO [wfs.json] - about to encode JSON
2021-03-11 11:03:47,471 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 11:03:47,481 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@336fed4 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ field_officer_id = 4 ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}user_projects]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ field_officer_id = 4 ]
        typeNames[0] = {ngeo}user_projects
        filter = [ field_officer_id = 4 ]
2021-03-11 11:03:47,483 INFO [wfs.json] - about to encode JSON
2021-03-11 11:04:05,924 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 11:04:05,955 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@53247f54 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ strToLowerCase([sub_name]) is like ngare mara ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_sublocations]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ strToLowerCase([sub_name]) is like ngare mara ]
        typeNames[0] = {ngeo}ke_sublocations
        filter = [ strToLowerCase([sub_name]) is like ngare mara ]
2021-03-11 11:04:05,956 INFO [wfs.json] - about to encode JSON
2021-03-11 11:04:09,230 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 11:04:09,240 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@5ca66b7 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ field_officer_id = 4 ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}user_projects]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ field_officer_id = 4 ]
        typeNames[0] = {ngeo}user_projects
        filter = [ field_officer_id = 4 ]
2021-03-11 11:04:09,247 INFO [wfs.json] - about to encode JSON
2021-03-11 11:04:10,860 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 11:04:10,866 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@4cde37b4 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ field_officer_id = 4 ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}user_projects]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ field_officer_id = 4 ]
        typeNames[0] = {ngeo}user_projects
        filter = [ field_officer_id = 4 ]
2021-03-11 11:04:10,867 INFO [wfs.json] - about to encode JSON
2021-03-11 11:10:28,575 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 11:10:28,585 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@35d5c4e6 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_regions]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_regions
2021-03-11 11:10:28,586 INFO [wfs.json] - about to encode JSON
2021-03-11 11:10:37,680 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 11:10:37,691 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@589f2daa (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_counties]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_counties
2021-03-11 11:10:37,692 INFO [wfs.json] - about to encode JSON
2021-03-11 11:10:59,015 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 11:10:59,071 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@3a91820e (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ strToLowerCase([sub_name]) is like ngare mara ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_sublocations]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ strToLowerCase([sub_name]) is like ngare mara ]
        typeNames[0] = {ngeo}ke_sublocations
        filter = [ strToLowerCase([sub_name]) is like ngare mara ]
2021-03-11 11:10:59,074 INFO [wfs.json] - about to encode JSON
2021-03-11 11:11:03,638 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 11:11:03,659 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@27296b7e (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ strToLowerCase([sub_name]) is like ngare mara ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_sublocations]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ strToLowerCase([sub_name]) is like ngare mara ]
        typeNames[0] = {ngeo}ke_sublocations
        filter = [ strToLowerCase([sub_name]) is like ngare mara ]
2021-03-11 11:11:03,660 INFO [wfs.json] - about to encode JSON
2021-03-11 11:11:07,630 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 11:11:07,639 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@74973773 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ field_officer_id = 4 ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}user_projects]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ field_officer_id = 4 ]
        typeNames[0] = {ngeo}user_projects
        filter = [ field_officer_id = 4 ]
2021-03-11 11:11:07,641 INFO [wfs.json] - about to encode JSON
2021-03-11 11:11:51,969 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 11:11:52,005 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@103e200c (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ strToLowerCase([sub_name]) is like ngare mara ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_sublocations]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ strToLowerCase([sub_name]) is like ngare mara ]
        typeNames[0] = {ngeo}ke_sublocations
        filter = [ strToLowerCase([sub_name]) is like ngare mara ]
2021-03-11 11:11:52,009 INFO [wfs.json] - about to encode JSON
2021-03-11 11:11:56,878 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 11:11:56,886 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@7e48b0b4 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ field_officer_id = 4 ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}user_projects]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ field_officer_id = 4 ]
        typeNames[0] = {ngeo}user_projects
        filter = [ field_officer_id = 4 ]
2021-03-11 11:11:56,888 INFO [wfs.json] - about to encode JSON
2021-03-11 11:12:22,836 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 11:12:22,874 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@1a26991 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ strToLowerCase([sub_name]) is like ngare mara ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_sublocations]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ strToLowerCase([sub_name]) is like ngare mara ]
        typeNames[0] = {ngeo}ke_sublocations
        filter = [ strToLowerCase([sub_name]) is like ngare mara ]
2021-03-11 11:12:22,877 INFO [wfs.json] - about to encode JSON
2021-03-11 11:12:31,659 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 11:12:31,672 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@bd6c944 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ field_officer_id = 4 ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}user_projects]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ field_officer_id = 4 ]
        typeNames[0] = {ngeo}user_projects
        filter = [ field_officer_id = 4 ]
2021-03-11 11:12:31,674 INFO [wfs.json] - about to encode JSON
2021-03-11 11:16:52,190 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 11:16:52,225 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@665698c2 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ strToLowerCase([sub_name]) is like ngare mara ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_sublocations]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ strToLowerCase([sub_name]) is like ngare mara ]
        typeNames[0] = {ngeo}ke_sublocations
        filter = [ strToLowerCase([sub_name]) is like ngare mara ]
2021-03-11 11:16:52,228 INFO [wfs.json] - about to encode JSON
2021-03-11 11:16:58,709 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 11:16:58,718 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@f4a3b38 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ field_officer_id = 4 ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}user_projects]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ field_officer_id = 4 ]
        typeNames[0] = {ngeo}user_projects
        filter = [ field_officer_id = 4 ]
2021-03-11 11:16:58,719 INFO [wfs.json] - about to encode JSON
2021-03-11 11:17:28,680 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 11:17:28,691 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@5acb450f (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ field_officer_id = 4 ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}user_projects]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ field_officer_id = 4 ]
        typeNames[0] = {ngeo}user_projects
        filter = [ field_officer_id = 4 ]
2021-03-11 11:17:28,692 INFO [wfs.json] - about to encode JSON
2021-03-11 11:17:36,956 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 11:17:36,964 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@189e69c2 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ field_officer_id = 4 ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}user_projects]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ field_officer_id = 4 ]
        typeNames[0] = {ngeo}user_projects
        filter = [ field_officer_id = 4 ]
2021-03-11 11:17:36,966 INFO [wfs.json] - about to encode JSON
2021-03-11 11:17:38,060 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 11:17:38,081 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@6251cc8e (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ strToLowerCase([sub_name]) is like ngare mara ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_sublocations]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ strToLowerCase([sub_name]) is like ngare mara ]
        typeNames[0] = {ngeo}ke_sublocations
        filter = [ strToLowerCase([sub_name]) is like ngare mara ]
2021-03-11 11:17:38,083 INFO [wfs.json] - about to encode JSON
2021-03-11 11:18:50,262 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 11:18:50,271 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@278e623e (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ field_officer_id = 4 ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}user_projects]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ field_officer_id = 4 ]
        typeNames[0] = {ngeo}user_projects
        filter = [ field_officer_id = 4 ]
2021-03-11 11:18:50,273 INFO [wfs.json] - about to encode JSON
2021-03-11 12:02:55,723 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 12:02:55,733 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@6b439702 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_regions]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_regions
2021-03-11 12:02:55,734 INFO [wfs.json] - about to encode JSON
2021-03-11 12:09:20,757 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 12:09:20,772 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-03-11 12:09:20,795 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@4404c6f (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_regions]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {ngeo}ke_regions
2021-03-11 12:09:20,805 INFO [wfs.json] - about to encode JSON
2021-03-11 12:09:20,897 INFO [geoserver.wfs] - 
Request: getFeature
    service = wfs
    version = 2.0.0
    baseUrl = http://localhost:8080/geoserver/
    outputFormat = json
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@593f97cd (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [ strToLowerCase([sub_name]) is like ngare mara ], abstractSortingClause: null, aliases: null, typeNames: [{ngeo}ke_sublocations]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [ strToLowerCase([sub_name]) is like ngare mara ]
        typeNames[0] = {ngeo}ke_sublocations
        filter = [ strToLowerCase([sub_name]) is like ngare mara ]
2021-03-11 12:09:20,903 INFO [wfs.json] - about to encode JSON
